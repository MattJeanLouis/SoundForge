generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  soundcloudId String   @unique
  username     String
  email        String   @unique
  infosargent  Float    @default(0)
  level        Int      @default(1)
  experience   Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  tracks         Track[]
  studioItems    UserStudioItem[]
  sentBoosts     Boost[]              @relation("BoostSender")
  receivedBoosts Boost[]              @relation("BoostReceiver")
  participations EventParticipation[]
  transactions   Transaction[]
}

model Track {
  id                String   @id @default(uuid())
  soundcloudTrackId String   @unique
  title             String
  artwork           String?
  genre             String[]
  mood              String[]
  baseValue         Float    @default(0)
  currentValue      Float    @default(0)
  playCount         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  userId              String
  user                User                 @relation(fields: [userId], references: [id])
  boosts              Boost[]
  eventParticipations EventParticipation[]
}

model StudioItem {
  id              String   @id @default(uuid())
  name            String
  description     String
  type            String // e.g., "MIDI_KEYBOARD", "SYNTHESIZER", "MIXER"
  price           Float
  bonusMultiplier Float
  imageUrl        String?
  createdAt       DateTime @default(now())

  // Relations
  userItems UserStudioItem[]
}

model UserStudioItem {
  id          String   @id @default(uuid())
  purchasedAt DateTime @default(now())

  // Relations
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  studioItemId String
  studioItem   StudioItem @relation(fields: [studioItemId], references: [id])

  @@unique([userId, studioItemId])
}

model GameEvent {
  id             String   @id @default(uuid())
  name           String
  description    String
  startDate      DateTime
  endDate        DateTime
  requiredGenres String[]
  requiredMoods  String[]
  rewardAmount   Float
  status         String // "UPCOMING", "ACTIVE", "COMPLETED"
  createdAt      DateTime @default(now())

  // Relations
  participations EventParticipation[]
}

model EventParticipation {
  id       String   @id @default(uuid())
  joinedAt DateTime @default(now())
  score    Float    @default(0)

  // Relations
  userId  String
  user    User      @relation(fields: [userId], references: [id])
  eventId String
  event   GameEvent @relation(fields: [eventId], references: [id])
  trackId String
  track   Track     @relation(fields: [trackId], references: [id])

  @@unique([userId, eventId, trackId])
}

model Boost {
  id        String   @id @default(uuid())
  amount    Float
  duration  Int // Duration in hours
  startTime DateTime @default(now())
  endTime   DateTime
  createdAt DateTime @default(now())

  // Relations
  senderId   String
  sender     User   @relation("BoostSender", fields: [senderId], references: [id])
  receiverId String
  receiver   User   @relation("BoostReceiver", fields: [receiverId], references: [id])
  trackId    String
  track      Track  @relation(fields: [trackId], references: [id])
}

model Transaction {
  id          String   @id @default(uuid())
  type        String // "BOOST", "PURCHASE", "EVENT_REWARD", "TRACK_EARNING"
  amount      Float
  description String
  createdAt   DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

// For tracking game cycles and wipes
model GameCycle {
  id          String   @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  cycleNumber Int
  status      String // "ACTIVE", "COMPLETED"
  createdAt   DateTime @default(now())
}
