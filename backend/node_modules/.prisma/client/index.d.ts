
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Track
 * 
 */
export type Track = $Result.DefaultSelection<Prisma.$TrackPayload>
/**
 * Model StudioItem
 * 
 */
export type StudioItem = $Result.DefaultSelection<Prisma.$StudioItemPayload>
/**
 * Model UserStudioItem
 * 
 */
export type UserStudioItem = $Result.DefaultSelection<Prisma.$UserStudioItemPayload>
/**
 * Model GameEvent
 * 
 */
export type GameEvent = $Result.DefaultSelection<Prisma.$GameEventPayload>
/**
 * Model EventParticipation
 * 
 */
export type EventParticipation = $Result.DefaultSelection<Prisma.$EventParticipationPayload>
/**
 * Model Boost
 * 
 */
export type Boost = $Result.DefaultSelection<Prisma.$BoostPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model GameCycle
 * 
 */
export type GameCycle = $Result.DefaultSelection<Prisma.$GameCyclePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.track`: Exposes CRUD operations for the **Track** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tracks
    * const tracks = await prisma.track.findMany()
    * ```
    */
  get track(): Prisma.TrackDelegate<ExtArgs>;

  /**
   * `prisma.studioItem`: Exposes CRUD operations for the **StudioItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudioItems
    * const studioItems = await prisma.studioItem.findMany()
    * ```
    */
  get studioItem(): Prisma.StudioItemDelegate<ExtArgs>;

  /**
   * `prisma.userStudioItem`: Exposes CRUD operations for the **UserStudioItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStudioItems
    * const userStudioItems = await prisma.userStudioItem.findMany()
    * ```
    */
  get userStudioItem(): Prisma.UserStudioItemDelegate<ExtArgs>;

  /**
   * `prisma.gameEvent`: Exposes CRUD operations for the **GameEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameEvents
    * const gameEvents = await prisma.gameEvent.findMany()
    * ```
    */
  get gameEvent(): Prisma.GameEventDelegate<ExtArgs>;

  /**
   * `prisma.eventParticipation`: Exposes CRUD operations for the **EventParticipation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventParticipations
    * const eventParticipations = await prisma.eventParticipation.findMany()
    * ```
    */
  get eventParticipation(): Prisma.EventParticipationDelegate<ExtArgs>;

  /**
   * `prisma.boost`: Exposes CRUD operations for the **Boost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Boosts
    * const boosts = await prisma.boost.findMany()
    * ```
    */
  get boost(): Prisma.BoostDelegate<ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs>;

  /**
   * `prisma.gameCycle`: Exposes CRUD operations for the **GameCycle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameCycles
    * const gameCycles = await prisma.gameCycle.findMany()
    * ```
    */
  get gameCycle(): Prisma.GameCycleDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Track: 'Track',
    StudioItem: 'StudioItem',
    UserStudioItem: 'UserStudioItem',
    GameEvent: 'GameEvent',
    EventParticipation: 'EventParticipation',
    Boost: 'Boost',
    Transaction: 'Transaction',
    GameCycle: 'GameCycle'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "track" | "studioItem" | "userStudioItem" | "gameEvent" | "eventParticipation" | "boost" | "transaction" | "gameCycle"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Track: {
        payload: Prisma.$TrackPayload<ExtArgs>
        fields: Prisma.TrackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          findFirst: {
            args: Prisma.TrackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          findMany: {
            args: Prisma.TrackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>[]
          }
          create: {
            args: Prisma.TrackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          createMany: {
            args: Prisma.TrackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>[]
          }
          delete: {
            args: Prisma.TrackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          update: {
            args: Prisma.TrackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          deleteMany: {
            args: Prisma.TrackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TrackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          aggregate: {
            args: Prisma.TrackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrack>
          }
          groupBy: {
            args: Prisma.TrackGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrackGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrackCountArgs<ExtArgs>
            result: $Utils.Optional<TrackCountAggregateOutputType> | number
          }
        }
      }
      StudioItem: {
        payload: Prisma.$StudioItemPayload<ExtArgs>
        fields: Prisma.StudioItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudioItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudioItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioItemPayload>
          }
          findFirst: {
            args: Prisma.StudioItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudioItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioItemPayload>
          }
          findMany: {
            args: Prisma.StudioItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioItemPayload>[]
          }
          create: {
            args: Prisma.StudioItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioItemPayload>
          }
          createMany: {
            args: Prisma.StudioItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudioItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioItemPayload>[]
          }
          delete: {
            args: Prisma.StudioItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioItemPayload>
          }
          update: {
            args: Prisma.StudioItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioItemPayload>
          }
          deleteMany: {
            args: Prisma.StudioItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudioItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudioItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioItemPayload>
          }
          aggregate: {
            args: Prisma.StudioItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudioItem>
          }
          groupBy: {
            args: Prisma.StudioItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudioItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudioItemCountArgs<ExtArgs>
            result: $Utils.Optional<StudioItemCountAggregateOutputType> | number
          }
        }
      }
      UserStudioItem: {
        payload: Prisma.$UserStudioItemPayload<ExtArgs>
        fields: Prisma.UserStudioItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStudioItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudioItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStudioItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudioItemPayload>
          }
          findFirst: {
            args: Prisma.UserStudioItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudioItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStudioItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudioItemPayload>
          }
          findMany: {
            args: Prisma.UserStudioItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudioItemPayload>[]
          }
          create: {
            args: Prisma.UserStudioItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudioItemPayload>
          }
          createMany: {
            args: Prisma.UserStudioItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserStudioItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudioItemPayload>[]
          }
          delete: {
            args: Prisma.UserStudioItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudioItemPayload>
          }
          update: {
            args: Prisma.UserStudioItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudioItemPayload>
          }
          deleteMany: {
            args: Prisma.UserStudioItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStudioItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserStudioItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudioItemPayload>
          }
          aggregate: {
            args: Prisma.UserStudioItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserStudioItem>
          }
          groupBy: {
            args: Prisma.UserStudioItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStudioItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserStudioItemCountArgs<ExtArgs>
            result: $Utils.Optional<UserStudioItemCountAggregateOutputType> | number
          }
        }
      }
      GameEvent: {
        payload: Prisma.$GameEventPayload<ExtArgs>
        fields: Prisma.GameEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameEventPayload>
          }
          findFirst: {
            args: Prisma.GameEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameEventPayload>
          }
          findMany: {
            args: Prisma.GameEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameEventPayload>[]
          }
          create: {
            args: Prisma.GameEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameEventPayload>
          }
          createMany: {
            args: Prisma.GameEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameEventPayload>[]
          }
          delete: {
            args: Prisma.GameEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameEventPayload>
          }
          update: {
            args: Prisma.GameEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameEventPayload>
          }
          deleteMany: {
            args: Prisma.GameEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameEventPayload>
          }
          aggregate: {
            args: Prisma.GameEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameEvent>
          }
          groupBy: {
            args: Prisma.GameEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameEventCountArgs<ExtArgs>
            result: $Utils.Optional<GameEventCountAggregateOutputType> | number
          }
        }
      }
      EventParticipation: {
        payload: Prisma.$EventParticipationPayload<ExtArgs>
        fields: Prisma.EventParticipationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventParticipationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventParticipationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipationPayload>
          }
          findFirst: {
            args: Prisma.EventParticipationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventParticipationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipationPayload>
          }
          findMany: {
            args: Prisma.EventParticipationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipationPayload>[]
          }
          create: {
            args: Prisma.EventParticipationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipationPayload>
          }
          createMany: {
            args: Prisma.EventParticipationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventParticipationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipationPayload>[]
          }
          delete: {
            args: Prisma.EventParticipationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipationPayload>
          }
          update: {
            args: Prisma.EventParticipationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipationPayload>
          }
          deleteMany: {
            args: Prisma.EventParticipationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventParticipationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventParticipationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipationPayload>
          }
          aggregate: {
            args: Prisma.EventParticipationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventParticipation>
          }
          groupBy: {
            args: Prisma.EventParticipationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventParticipationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventParticipationCountArgs<ExtArgs>
            result: $Utils.Optional<EventParticipationCountAggregateOutputType> | number
          }
        }
      }
      Boost: {
        payload: Prisma.$BoostPayload<ExtArgs>
        fields: Prisma.BoostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoostPayload>
          }
          findFirst: {
            args: Prisma.BoostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoostPayload>
          }
          findMany: {
            args: Prisma.BoostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoostPayload>[]
          }
          create: {
            args: Prisma.BoostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoostPayload>
          }
          createMany: {
            args: Prisma.BoostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BoostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoostPayload>[]
          }
          delete: {
            args: Prisma.BoostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoostPayload>
          }
          update: {
            args: Prisma.BoostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoostPayload>
          }
          deleteMany: {
            args: Prisma.BoostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BoostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BoostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoostPayload>
          }
          aggregate: {
            args: Prisma.BoostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoost>
          }
          groupBy: {
            args: Prisma.BoostGroupByArgs<ExtArgs>
            result: $Utils.Optional<BoostGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoostCountArgs<ExtArgs>
            result: $Utils.Optional<BoostCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      GameCycle: {
        payload: Prisma.$GameCyclePayload<ExtArgs>
        fields: Prisma.GameCycleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameCycleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCyclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameCycleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCyclePayload>
          }
          findFirst: {
            args: Prisma.GameCycleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCyclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameCycleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCyclePayload>
          }
          findMany: {
            args: Prisma.GameCycleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCyclePayload>[]
          }
          create: {
            args: Prisma.GameCycleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCyclePayload>
          }
          createMany: {
            args: Prisma.GameCycleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCycleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCyclePayload>[]
          }
          delete: {
            args: Prisma.GameCycleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCyclePayload>
          }
          update: {
            args: Prisma.GameCycleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCyclePayload>
          }
          deleteMany: {
            args: Prisma.GameCycleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameCycleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameCycleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCyclePayload>
          }
          aggregate: {
            args: Prisma.GameCycleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameCycle>
          }
          groupBy: {
            args: Prisma.GameCycleGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameCycleGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCycleCountArgs<ExtArgs>
            result: $Utils.Optional<GameCycleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    tracks: number
    studioItems: number
    sentBoosts: number
    receivedBoosts: number
    participations: number
    transactions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracks?: boolean | UserCountOutputTypeCountTracksArgs
    studioItems?: boolean | UserCountOutputTypeCountStudioItemsArgs
    sentBoosts?: boolean | UserCountOutputTypeCountSentBoostsArgs
    receivedBoosts?: boolean | UserCountOutputTypeCountReceivedBoostsArgs
    participations?: boolean | UserCountOutputTypeCountParticipationsArgs
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTracksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudioItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStudioItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentBoostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedBoostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventParticipationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type TrackCountOutputType
   */

  export type TrackCountOutputType = {
    boosts: number
    eventParticipations: number
  }

  export type TrackCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    boosts?: boolean | TrackCountOutputTypeCountBoostsArgs
    eventParticipations?: boolean | TrackCountOutputTypeCountEventParticipationsArgs
  }

  // Custom InputTypes
  /**
   * TrackCountOutputType without action
   */
  export type TrackCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackCountOutputType
     */
    select?: TrackCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TrackCountOutputType without action
   */
  export type TrackCountOutputTypeCountBoostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoostWhereInput
  }

  /**
   * TrackCountOutputType without action
   */
  export type TrackCountOutputTypeCountEventParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventParticipationWhereInput
  }


  /**
   * Count Type StudioItemCountOutputType
   */

  export type StudioItemCountOutputType = {
    userItems: number
  }

  export type StudioItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userItems?: boolean | StudioItemCountOutputTypeCountUserItemsArgs
  }

  // Custom InputTypes
  /**
   * StudioItemCountOutputType without action
   */
  export type StudioItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItemCountOutputType
     */
    select?: StudioItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudioItemCountOutputType without action
   */
  export type StudioItemCountOutputTypeCountUserItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStudioItemWhereInput
  }


  /**
   * Count Type GameEventCountOutputType
   */

  export type GameEventCountOutputType = {
    participations: number
  }

  export type GameEventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participations?: boolean | GameEventCountOutputTypeCountParticipationsArgs
  }

  // Custom InputTypes
  /**
   * GameEventCountOutputType without action
   */
  export type GameEventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEventCountOutputType
     */
    select?: GameEventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameEventCountOutputType without action
   */
  export type GameEventCountOutputTypeCountParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventParticipationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    infosargent: number | null
    level: number | null
    experience: number | null
  }

  export type UserSumAggregateOutputType = {
    infosargent: number | null
    level: number | null
    experience: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    soundcloudId: string | null
    username: string | null
    email: string | null
    infosargent: number | null
    level: number | null
    experience: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    soundcloudId: string | null
    username: string | null
    email: string | null
    infosargent: number | null
    level: number | null
    experience: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    soundcloudId: number
    username: number
    email: number
    infosargent: number
    level: number
    experience: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    infosargent?: true
    level?: true
    experience?: true
  }

  export type UserSumAggregateInputType = {
    infosargent?: true
    level?: true
    experience?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    soundcloudId?: true
    username?: true
    email?: true
    infosargent?: true
    level?: true
    experience?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    soundcloudId?: true
    username?: true
    email?: true
    infosargent?: true
    level?: true
    experience?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    soundcloudId?: true
    username?: true
    email?: true
    infosargent?: true
    level?: true
    experience?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    soundcloudId: string
    username: string
    email: string
    infosargent: number
    level: number
    experience: number
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    soundcloudId?: boolean
    username?: boolean
    email?: boolean
    infosargent?: boolean
    level?: boolean
    experience?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tracks?: boolean | User$tracksArgs<ExtArgs>
    studioItems?: boolean | User$studioItemsArgs<ExtArgs>
    sentBoosts?: boolean | User$sentBoostsArgs<ExtArgs>
    receivedBoosts?: boolean | User$receivedBoostsArgs<ExtArgs>
    participations?: boolean | User$participationsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    soundcloudId?: boolean
    username?: boolean
    email?: boolean
    infosargent?: boolean
    level?: boolean
    experience?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    soundcloudId?: boolean
    username?: boolean
    email?: boolean
    infosargent?: boolean
    level?: boolean
    experience?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracks?: boolean | User$tracksArgs<ExtArgs>
    studioItems?: boolean | User$studioItemsArgs<ExtArgs>
    sentBoosts?: boolean | User$sentBoostsArgs<ExtArgs>
    receivedBoosts?: boolean | User$receivedBoostsArgs<ExtArgs>
    participations?: boolean | User$participationsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      tracks: Prisma.$TrackPayload<ExtArgs>[]
      studioItems: Prisma.$UserStudioItemPayload<ExtArgs>[]
      sentBoosts: Prisma.$BoostPayload<ExtArgs>[]
      receivedBoosts: Prisma.$BoostPayload<ExtArgs>[]
      participations: Prisma.$EventParticipationPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      soundcloudId: string
      username: string
      email: string
      infosargent: number
      level: number
      experience: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tracks<T extends User$tracksArgs<ExtArgs> = {}>(args?: Subset<T, User$tracksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findMany"> | Null>
    studioItems<T extends User$studioItemsArgs<ExtArgs> = {}>(args?: Subset<T, User$studioItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "findMany"> | Null>
    sentBoosts<T extends User$sentBoostsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentBoostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "findMany"> | Null>
    receivedBoosts<T extends User$receivedBoostsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedBoostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "findMany"> | Null>
    participations<T extends User$participationsArgs<ExtArgs> = {}>(args?: Subset<T, User$participationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "findMany"> | Null>
    transactions<T extends User$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly soundcloudId: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly infosargent: FieldRef<"User", 'Float'>
    readonly level: FieldRef<"User", 'Int'>
    readonly experience: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.tracks
   */
  export type User$tracksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    where?: TrackWhereInput
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    cursor?: TrackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * User.studioItems
   */
  export type User$studioItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    where?: UserStudioItemWhereInput
    orderBy?: UserStudioItemOrderByWithRelationInput | UserStudioItemOrderByWithRelationInput[]
    cursor?: UserStudioItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStudioItemScalarFieldEnum | UserStudioItemScalarFieldEnum[]
  }

  /**
   * User.sentBoosts
   */
  export type User$sentBoostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    where?: BoostWhereInput
    orderBy?: BoostOrderByWithRelationInput | BoostOrderByWithRelationInput[]
    cursor?: BoostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoostScalarFieldEnum | BoostScalarFieldEnum[]
  }

  /**
   * User.receivedBoosts
   */
  export type User$receivedBoostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    where?: BoostWhereInput
    orderBy?: BoostOrderByWithRelationInput | BoostOrderByWithRelationInput[]
    cursor?: BoostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoostScalarFieldEnum | BoostScalarFieldEnum[]
  }

  /**
   * User.participations
   */
  export type User$participationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    where?: EventParticipationWhereInput
    orderBy?: EventParticipationOrderByWithRelationInput | EventParticipationOrderByWithRelationInput[]
    cursor?: EventParticipationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventParticipationScalarFieldEnum | EventParticipationScalarFieldEnum[]
  }

  /**
   * User.transactions
   */
  export type User$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Track
   */

  export type AggregateTrack = {
    _count: TrackCountAggregateOutputType | null
    _avg: TrackAvgAggregateOutputType | null
    _sum: TrackSumAggregateOutputType | null
    _min: TrackMinAggregateOutputType | null
    _max: TrackMaxAggregateOutputType | null
  }

  export type TrackAvgAggregateOutputType = {
    baseValue: number | null
    currentValue: number | null
    playCount: number | null
  }

  export type TrackSumAggregateOutputType = {
    baseValue: number | null
    currentValue: number | null
    playCount: number | null
  }

  export type TrackMinAggregateOutputType = {
    id: string | null
    soundcloudTrackId: string | null
    title: string | null
    artwork: string | null
    baseValue: number | null
    currentValue: number | null
    playCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type TrackMaxAggregateOutputType = {
    id: string | null
    soundcloudTrackId: string | null
    title: string | null
    artwork: string | null
    baseValue: number | null
    currentValue: number | null
    playCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type TrackCountAggregateOutputType = {
    id: number
    soundcloudTrackId: number
    title: number
    artwork: number
    genre: number
    mood: number
    baseValue: number
    currentValue: number
    playCount: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type TrackAvgAggregateInputType = {
    baseValue?: true
    currentValue?: true
    playCount?: true
  }

  export type TrackSumAggregateInputType = {
    baseValue?: true
    currentValue?: true
    playCount?: true
  }

  export type TrackMinAggregateInputType = {
    id?: true
    soundcloudTrackId?: true
    title?: true
    artwork?: true
    baseValue?: true
    currentValue?: true
    playCount?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type TrackMaxAggregateInputType = {
    id?: true
    soundcloudTrackId?: true
    title?: true
    artwork?: true
    baseValue?: true
    currentValue?: true
    playCount?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type TrackCountAggregateInputType = {
    id?: true
    soundcloudTrackId?: true
    title?: true
    artwork?: true
    genre?: true
    mood?: true
    baseValue?: true
    currentValue?: true
    playCount?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type TrackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Track to aggregate.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tracks
    **/
    _count?: true | TrackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrackMaxAggregateInputType
  }

  export type GetTrackAggregateType<T extends TrackAggregateArgs> = {
        [P in keyof T & keyof AggregateTrack]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrack[P]>
      : GetScalarType<T[P], AggregateTrack[P]>
  }




  export type TrackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackWhereInput
    orderBy?: TrackOrderByWithAggregationInput | TrackOrderByWithAggregationInput[]
    by: TrackScalarFieldEnum[] | TrackScalarFieldEnum
    having?: TrackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrackCountAggregateInputType | true
    _avg?: TrackAvgAggregateInputType
    _sum?: TrackSumAggregateInputType
    _min?: TrackMinAggregateInputType
    _max?: TrackMaxAggregateInputType
  }

  export type TrackGroupByOutputType = {
    id: string
    soundcloudTrackId: string
    title: string
    artwork: string | null
    genre: string[]
    mood: string[]
    baseValue: number
    currentValue: number
    playCount: number
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: TrackCountAggregateOutputType | null
    _avg: TrackAvgAggregateOutputType | null
    _sum: TrackSumAggregateOutputType | null
    _min: TrackMinAggregateOutputType | null
    _max: TrackMaxAggregateOutputType | null
  }

  type GetTrackGroupByPayload<T extends TrackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrackGroupByOutputType[P]>
            : GetScalarType<T[P], TrackGroupByOutputType[P]>
        }
      >
    >


  export type TrackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    soundcloudTrackId?: boolean
    title?: boolean
    artwork?: boolean
    genre?: boolean
    mood?: boolean
    baseValue?: boolean
    currentValue?: boolean
    playCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    boosts?: boolean | Track$boostsArgs<ExtArgs>
    eventParticipations?: boolean | Track$eventParticipationsArgs<ExtArgs>
    _count?: boolean | TrackCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["track"]>

  export type TrackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    soundcloudTrackId?: boolean
    title?: boolean
    artwork?: boolean
    genre?: boolean
    mood?: boolean
    baseValue?: boolean
    currentValue?: boolean
    playCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["track"]>

  export type TrackSelectScalar = {
    id?: boolean
    soundcloudTrackId?: boolean
    title?: boolean
    artwork?: boolean
    genre?: boolean
    mood?: boolean
    baseValue?: boolean
    currentValue?: boolean
    playCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type TrackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    boosts?: boolean | Track$boostsArgs<ExtArgs>
    eventParticipations?: boolean | Track$eventParticipationsArgs<ExtArgs>
    _count?: boolean | TrackCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TrackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TrackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Track"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      boosts: Prisma.$BoostPayload<ExtArgs>[]
      eventParticipations: Prisma.$EventParticipationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      soundcloudTrackId: string
      title: string
      artwork: string | null
      genre: string[]
      mood: string[]
      baseValue: number
      currentValue: number
      playCount: number
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["track"]>
    composites: {}
  }

  type TrackGetPayload<S extends boolean | null | undefined | TrackDefaultArgs> = $Result.GetResult<Prisma.$TrackPayload, S>

  type TrackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TrackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TrackCountAggregateInputType | true
    }

  export interface TrackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Track'], meta: { name: 'Track' } }
    /**
     * Find zero or one Track that matches the filter.
     * @param {TrackFindUniqueArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrackFindUniqueArgs>(args: SelectSubset<T, TrackFindUniqueArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Track that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TrackFindUniqueOrThrowArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrackFindUniqueOrThrowArgs>(args: SelectSubset<T, TrackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Track that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackFindFirstArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrackFindFirstArgs>(args?: SelectSubset<T, TrackFindFirstArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Track that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackFindFirstOrThrowArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrackFindFirstOrThrowArgs>(args?: SelectSubset<T, TrackFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tracks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tracks
     * const tracks = await prisma.track.findMany()
     * 
     * // Get first 10 Tracks
     * const tracks = await prisma.track.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trackWithIdOnly = await prisma.track.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrackFindManyArgs>(args?: SelectSubset<T, TrackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Track.
     * @param {TrackCreateArgs} args - Arguments to create a Track.
     * @example
     * // Create one Track
     * const Track = await prisma.track.create({
     *   data: {
     *     // ... data to create a Track
     *   }
     * })
     * 
     */
    create<T extends TrackCreateArgs>(args: SelectSubset<T, TrackCreateArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tracks.
     * @param {TrackCreateManyArgs} args - Arguments to create many Tracks.
     * @example
     * // Create many Tracks
     * const track = await prisma.track.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrackCreateManyArgs>(args?: SelectSubset<T, TrackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tracks and returns the data saved in the database.
     * @param {TrackCreateManyAndReturnArgs} args - Arguments to create many Tracks.
     * @example
     * // Create many Tracks
     * const track = await prisma.track.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tracks and only return the `id`
     * const trackWithIdOnly = await prisma.track.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrackCreateManyAndReturnArgs>(args?: SelectSubset<T, TrackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Track.
     * @param {TrackDeleteArgs} args - Arguments to delete one Track.
     * @example
     * // Delete one Track
     * const Track = await prisma.track.delete({
     *   where: {
     *     // ... filter to delete one Track
     *   }
     * })
     * 
     */
    delete<T extends TrackDeleteArgs>(args: SelectSubset<T, TrackDeleteArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Track.
     * @param {TrackUpdateArgs} args - Arguments to update one Track.
     * @example
     * // Update one Track
     * const track = await prisma.track.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrackUpdateArgs>(args: SelectSubset<T, TrackUpdateArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tracks.
     * @param {TrackDeleteManyArgs} args - Arguments to filter Tracks to delete.
     * @example
     * // Delete a few Tracks
     * const { count } = await prisma.track.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrackDeleteManyArgs>(args?: SelectSubset<T, TrackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tracks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tracks
     * const track = await prisma.track.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrackUpdateManyArgs>(args: SelectSubset<T, TrackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Track.
     * @param {TrackUpsertArgs} args - Arguments to update or create a Track.
     * @example
     * // Update or create a Track
     * const track = await prisma.track.upsert({
     *   create: {
     *     // ... data to create a Track
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Track we want to update
     *   }
     * })
     */
    upsert<T extends TrackUpsertArgs>(args: SelectSubset<T, TrackUpsertArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tracks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackCountArgs} args - Arguments to filter Tracks to count.
     * @example
     * // Count the number of Tracks
     * const count = await prisma.track.count({
     *   where: {
     *     // ... the filter for the Tracks we want to count
     *   }
     * })
    **/
    count<T extends TrackCountArgs>(
      args?: Subset<T, TrackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Track.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrackAggregateArgs>(args: Subset<T, TrackAggregateArgs>): Prisma.PrismaPromise<GetTrackAggregateType<T>>

    /**
     * Group by Track.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrackGroupByArgs['orderBy'] }
        : { orderBy?: TrackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Track model
   */
  readonly fields: TrackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Track.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    boosts<T extends Track$boostsArgs<ExtArgs> = {}>(args?: Subset<T, Track$boostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "findMany"> | Null>
    eventParticipations<T extends Track$eventParticipationsArgs<ExtArgs> = {}>(args?: Subset<T, Track$eventParticipationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Track model
   */ 
  interface TrackFieldRefs {
    readonly id: FieldRef<"Track", 'String'>
    readonly soundcloudTrackId: FieldRef<"Track", 'String'>
    readonly title: FieldRef<"Track", 'String'>
    readonly artwork: FieldRef<"Track", 'String'>
    readonly genre: FieldRef<"Track", 'String[]'>
    readonly mood: FieldRef<"Track", 'String[]'>
    readonly baseValue: FieldRef<"Track", 'Float'>
    readonly currentValue: FieldRef<"Track", 'Float'>
    readonly playCount: FieldRef<"Track", 'Int'>
    readonly createdAt: FieldRef<"Track", 'DateTime'>
    readonly updatedAt: FieldRef<"Track", 'DateTime'>
    readonly userId: FieldRef<"Track", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Track findUnique
   */
  export type TrackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track findUniqueOrThrow
   */
  export type TrackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track findFirst
   */
  export type TrackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tracks.
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tracks.
     */
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Track findFirstOrThrow
   */
  export type TrackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tracks.
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tracks.
     */
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Track findMany
   */
  export type TrackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Tracks to fetch.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tracks.
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Track create
   */
  export type TrackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * The data needed to create a Track.
     */
    data: XOR<TrackCreateInput, TrackUncheckedCreateInput>
  }

  /**
   * Track createMany
   */
  export type TrackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tracks.
     */
    data: TrackCreateManyInput | TrackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Track createManyAndReturn
   */
  export type TrackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tracks.
     */
    data: TrackCreateManyInput | TrackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Track update
   */
  export type TrackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * The data needed to update a Track.
     */
    data: XOR<TrackUpdateInput, TrackUncheckedUpdateInput>
    /**
     * Choose, which Track to update.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track updateMany
   */
  export type TrackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tracks.
     */
    data: XOR<TrackUpdateManyMutationInput, TrackUncheckedUpdateManyInput>
    /**
     * Filter which Tracks to update
     */
    where?: TrackWhereInput
  }

  /**
   * Track upsert
   */
  export type TrackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * The filter to search for the Track to update in case it exists.
     */
    where: TrackWhereUniqueInput
    /**
     * In case the Track found by the `where` argument doesn't exist, create a new Track with this data.
     */
    create: XOR<TrackCreateInput, TrackUncheckedCreateInput>
    /**
     * In case the Track was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrackUpdateInput, TrackUncheckedUpdateInput>
  }

  /**
   * Track delete
   */
  export type TrackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter which Track to delete.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track deleteMany
   */
  export type TrackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tracks to delete
     */
    where?: TrackWhereInput
  }

  /**
   * Track.boosts
   */
  export type Track$boostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    where?: BoostWhereInput
    orderBy?: BoostOrderByWithRelationInput | BoostOrderByWithRelationInput[]
    cursor?: BoostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoostScalarFieldEnum | BoostScalarFieldEnum[]
  }

  /**
   * Track.eventParticipations
   */
  export type Track$eventParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    where?: EventParticipationWhereInput
    orderBy?: EventParticipationOrderByWithRelationInput | EventParticipationOrderByWithRelationInput[]
    cursor?: EventParticipationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventParticipationScalarFieldEnum | EventParticipationScalarFieldEnum[]
  }

  /**
   * Track without action
   */
  export type TrackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
  }


  /**
   * Model StudioItem
   */

  export type AggregateStudioItem = {
    _count: StudioItemCountAggregateOutputType | null
    _avg: StudioItemAvgAggregateOutputType | null
    _sum: StudioItemSumAggregateOutputType | null
    _min: StudioItemMinAggregateOutputType | null
    _max: StudioItemMaxAggregateOutputType | null
  }

  export type StudioItemAvgAggregateOutputType = {
    price: number | null
    bonusMultiplier: number | null
  }

  export type StudioItemSumAggregateOutputType = {
    price: number | null
    bonusMultiplier: number | null
  }

  export type StudioItemMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: string | null
    price: number | null
    bonusMultiplier: number | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type StudioItemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: string | null
    price: number | null
    bonusMultiplier: number | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type StudioItemCountAggregateOutputType = {
    id: number
    name: number
    description: number
    type: number
    price: number
    bonusMultiplier: number
    imageUrl: number
    createdAt: number
    _all: number
  }


  export type StudioItemAvgAggregateInputType = {
    price?: true
    bonusMultiplier?: true
  }

  export type StudioItemSumAggregateInputType = {
    price?: true
    bonusMultiplier?: true
  }

  export type StudioItemMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    price?: true
    bonusMultiplier?: true
    imageUrl?: true
    createdAt?: true
  }

  export type StudioItemMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    price?: true
    bonusMultiplier?: true
    imageUrl?: true
    createdAt?: true
  }

  export type StudioItemCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    price?: true
    bonusMultiplier?: true
    imageUrl?: true
    createdAt?: true
    _all?: true
  }

  export type StudioItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudioItem to aggregate.
     */
    where?: StudioItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudioItems to fetch.
     */
    orderBy?: StudioItemOrderByWithRelationInput | StudioItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudioItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudioItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudioItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudioItems
    **/
    _count?: true | StudioItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudioItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudioItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudioItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudioItemMaxAggregateInputType
  }

  export type GetStudioItemAggregateType<T extends StudioItemAggregateArgs> = {
        [P in keyof T & keyof AggregateStudioItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudioItem[P]>
      : GetScalarType<T[P], AggregateStudioItem[P]>
  }




  export type StudioItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudioItemWhereInput
    orderBy?: StudioItemOrderByWithAggregationInput | StudioItemOrderByWithAggregationInput[]
    by: StudioItemScalarFieldEnum[] | StudioItemScalarFieldEnum
    having?: StudioItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudioItemCountAggregateInputType | true
    _avg?: StudioItemAvgAggregateInputType
    _sum?: StudioItemSumAggregateInputType
    _min?: StudioItemMinAggregateInputType
    _max?: StudioItemMaxAggregateInputType
  }

  export type StudioItemGroupByOutputType = {
    id: string
    name: string
    description: string
    type: string
    price: number
    bonusMultiplier: number
    imageUrl: string | null
    createdAt: Date
    _count: StudioItemCountAggregateOutputType | null
    _avg: StudioItemAvgAggregateOutputType | null
    _sum: StudioItemSumAggregateOutputType | null
    _min: StudioItemMinAggregateOutputType | null
    _max: StudioItemMaxAggregateOutputType | null
  }

  type GetStudioItemGroupByPayload<T extends StudioItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudioItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudioItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudioItemGroupByOutputType[P]>
            : GetScalarType<T[P], StudioItemGroupByOutputType[P]>
        }
      >
    >


  export type StudioItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    price?: boolean
    bonusMultiplier?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    userItems?: boolean | StudioItem$userItemsArgs<ExtArgs>
    _count?: boolean | StudioItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studioItem"]>

  export type StudioItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    price?: boolean
    bonusMultiplier?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["studioItem"]>

  export type StudioItemSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    price?: boolean
    bonusMultiplier?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }

  export type StudioItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userItems?: boolean | StudioItem$userItemsArgs<ExtArgs>
    _count?: boolean | StudioItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudioItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StudioItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudioItem"
    objects: {
      userItems: Prisma.$UserStudioItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      type: string
      price: number
      bonusMultiplier: number
      imageUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["studioItem"]>
    composites: {}
  }

  type StudioItemGetPayload<S extends boolean | null | undefined | StudioItemDefaultArgs> = $Result.GetResult<Prisma.$StudioItemPayload, S>

  type StudioItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudioItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudioItemCountAggregateInputType | true
    }

  export interface StudioItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudioItem'], meta: { name: 'StudioItem' } }
    /**
     * Find zero or one StudioItem that matches the filter.
     * @param {StudioItemFindUniqueArgs} args - Arguments to find a StudioItem
     * @example
     * // Get one StudioItem
     * const studioItem = await prisma.studioItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudioItemFindUniqueArgs>(args: SelectSubset<T, StudioItemFindUniqueArgs<ExtArgs>>): Prisma__StudioItemClient<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StudioItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudioItemFindUniqueOrThrowArgs} args - Arguments to find a StudioItem
     * @example
     * // Get one StudioItem
     * const studioItem = await prisma.studioItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudioItemFindUniqueOrThrowArgs>(args: SelectSubset<T, StudioItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudioItemClient<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StudioItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioItemFindFirstArgs} args - Arguments to find a StudioItem
     * @example
     * // Get one StudioItem
     * const studioItem = await prisma.studioItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudioItemFindFirstArgs>(args?: SelectSubset<T, StudioItemFindFirstArgs<ExtArgs>>): Prisma__StudioItemClient<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StudioItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioItemFindFirstOrThrowArgs} args - Arguments to find a StudioItem
     * @example
     * // Get one StudioItem
     * const studioItem = await prisma.studioItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudioItemFindFirstOrThrowArgs>(args?: SelectSubset<T, StudioItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudioItemClient<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StudioItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudioItems
     * const studioItems = await prisma.studioItem.findMany()
     * 
     * // Get first 10 StudioItems
     * const studioItems = await prisma.studioItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studioItemWithIdOnly = await prisma.studioItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudioItemFindManyArgs>(args?: SelectSubset<T, StudioItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StudioItem.
     * @param {StudioItemCreateArgs} args - Arguments to create a StudioItem.
     * @example
     * // Create one StudioItem
     * const StudioItem = await prisma.studioItem.create({
     *   data: {
     *     // ... data to create a StudioItem
     *   }
     * })
     * 
     */
    create<T extends StudioItemCreateArgs>(args: SelectSubset<T, StudioItemCreateArgs<ExtArgs>>): Prisma__StudioItemClient<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StudioItems.
     * @param {StudioItemCreateManyArgs} args - Arguments to create many StudioItems.
     * @example
     * // Create many StudioItems
     * const studioItem = await prisma.studioItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudioItemCreateManyArgs>(args?: SelectSubset<T, StudioItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudioItems and returns the data saved in the database.
     * @param {StudioItemCreateManyAndReturnArgs} args - Arguments to create many StudioItems.
     * @example
     * // Create many StudioItems
     * const studioItem = await prisma.studioItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudioItems and only return the `id`
     * const studioItemWithIdOnly = await prisma.studioItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudioItemCreateManyAndReturnArgs>(args?: SelectSubset<T, StudioItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StudioItem.
     * @param {StudioItemDeleteArgs} args - Arguments to delete one StudioItem.
     * @example
     * // Delete one StudioItem
     * const StudioItem = await prisma.studioItem.delete({
     *   where: {
     *     // ... filter to delete one StudioItem
     *   }
     * })
     * 
     */
    delete<T extends StudioItemDeleteArgs>(args: SelectSubset<T, StudioItemDeleteArgs<ExtArgs>>): Prisma__StudioItemClient<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StudioItem.
     * @param {StudioItemUpdateArgs} args - Arguments to update one StudioItem.
     * @example
     * // Update one StudioItem
     * const studioItem = await prisma.studioItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudioItemUpdateArgs>(args: SelectSubset<T, StudioItemUpdateArgs<ExtArgs>>): Prisma__StudioItemClient<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StudioItems.
     * @param {StudioItemDeleteManyArgs} args - Arguments to filter StudioItems to delete.
     * @example
     * // Delete a few StudioItems
     * const { count } = await prisma.studioItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudioItemDeleteManyArgs>(args?: SelectSubset<T, StudioItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudioItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudioItems
     * const studioItem = await prisma.studioItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudioItemUpdateManyArgs>(args: SelectSubset<T, StudioItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudioItem.
     * @param {StudioItemUpsertArgs} args - Arguments to update or create a StudioItem.
     * @example
     * // Update or create a StudioItem
     * const studioItem = await prisma.studioItem.upsert({
     *   create: {
     *     // ... data to create a StudioItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudioItem we want to update
     *   }
     * })
     */
    upsert<T extends StudioItemUpsertArgs>(args: SelectSubset<T, StudioItemUpsertArgs<ExtArgs>>): Prisma__StudioItemClient<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StudioItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioItemCountArgs} args - Arguments to filter StudioItems to count.
     * @example
     * // Count the number of StudioItems
     * const count = await prisma.studioItem.count({
     *   where: {
     *     // ... the filter for the StudioItems we want to count
     *   }
     * })
    **/
    count<T extends StudioItemCountArgs>(
      args?: Subset<T, StudioItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudioItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudioItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudioItemAggregateArgs>(args: Subset<T, StudioItemAggregateArgs>): Prisma.PrismaPromise<GetStudioItemAggregateType<T>>

    /**
     * Group by StudioItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudioItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudioItemGroupByArgs['orderBy'] }
        : { orderBy?: StudioItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudioItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudioItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudioItem model
   */
  readonly fields: StudioItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudioItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudioItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userItems<T extends StudioItem$userItemsArgs<ExtArgs> = {}>(args?: Subset<T, StudioItem$userItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudioItem model
   */ 
  interface StudioItemFieldRefs {
    readonly id: FieldRef<"StudioItem", 'String'>
    readonly name: FieldRef<"StudioItem", 'String'>
    readonly description: FieldRef<"StudioItem", 'String'>
    readonly type: FieldRef<"StudioItem", 'String'>
    readonly price: FieldRef<"StudioItem", 'Float'>
    readonly bonusMultiplier: FieldRef<"StudioItem", 'Float'>
    readonly imageUrl: FieldRef<"StudioItem", 'String'>
    readonly createdAt: FieldRef<"StudioItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudioItem findUnique
   */
  export type StudioItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioItemInclude<ExtArgs> | null
    /**
     * Filter, which StudioItem to fetch.
     */
    where: StudioItemWhereUniqueInput
  }

  /**
   * StudioItem findUniqueOrThrow
   */
  export type StudioItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioItemInclude<ExtArgs> | null
    /**
     * Filter, which StudioItem to fetch.
     */
    where: StudioItemWhereUniqueInput
  }

  /**
   * StudioItem findFirst
   */
  export type StudioItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioItemInclude<ExtArgs> | null
    /**
     * Filter, which StudioItem to fetch.
     */
    where?: StudioItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudioItems to fetch.
     */
    orderBy?: StudioItemOrderByWithRelationInput | StudioItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudioItems.
     */
    cursor?: StudioItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudioItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudioItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudioItems.
     */
    distinct?: StudioItemScalarFieldEnum | StudioItemScalarFieldEnum[]
  }

  /**
   * StudioItem findFirstOrThrow
   */
  export type StudioItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioItemInclude<ExtArgs> | null
    /**
     * Filter, which StudioItem to fetch.
     */
    where?: StudioItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudioItems to fetch.
     */
    orderBy?: StudioItemOrderByWithRelationInput | StudioItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudioItems.
     */
    cursor?: StudioItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudioItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudioItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudioItems.
     */
    distinct?: StudioItemScalarFieldEnum | StudioItemScalarFieldEnum[]
  }

  /**
   * StudioItem findMany
   */
  export type StudioItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioItemInclude<ExtArgs> | null
    /**
     * Filter, which StudioItems to fetch.
     */
    where?: StudioItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudioItems to fetch.
     */
    orderBy?: StudioItemOrderByWithRelationInput | StudioItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudioItems.
     */
    cursor?: StudioItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudioItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudioItems.
     */
    skip?: number
    distinct?: StudioItemScalarFieldEnum | StudioItemScalarFieldEnum[]
  }

  /**
   * StudioItem create
   */
  export type StudioItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioItemInclude<ExtArgs> | null
    /**
     * The data needed to create a StudioItem.
     */
    data: XOR<StudioItemCreateInput, StudioItemUncheckedCreateInput>
  }

  /**
   * StudioItem createMany
   */
  export type StudioItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudioItems.
     */
    data: StudioItemCreateManyInput | StudioItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudioItem createManyAndReturn
   */
  export type StudioItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StudioItems.
     */
    data: StudioItemCreateManyInput | StudioItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudioItem update
   */
  export type StudioItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioItemInclude<ExtArgs> | null
    /**
     * The data needed to update a StudioItem.
     */
    data: XOR<StudioItemUpdateInput, StudioItemUncheckedUpdateInput>
    /**
     * Choose, which StudioItem to update.
     */
    where: StudioItemWhereUniqueInput
  }

  /**
   * StudioItem updateMany
   */
  export type StudioItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudioItems.
     */
    data: XOR<StudioItemUpdateManyMutationInput, StudioItemUncheckedUpdateManyInput>
    /**
     * Filter which StudioItems to update
     */
    where?: StudioItemWhereInput
  }

  /**
   * StudioItem upsert
   */
  export type StudioItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioItemInclude<ExtArgs> | null
    /**
     * The filter to search for the StudioItem to update in case it exists.
     */
    where: StudioItemWhereUniqueInput
    /**
     * In case the StudioItem found by the `where` argument doesn't exist, create a new StudioItem with this data.
     */
    create: XOR<StudioItemCreateInput, StudioItemUncheckedCreateInput>
    /**
     * In case the StudioItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudioItemUpdateInput, StudioItemUncheckedUpdateInput>
  }

  /**
   * StudioItem delete
   */
  export type StudioItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioItemInclude<ExtArgs> | null
    /**
     * Filter which StudioItem to delete.
     */
    where: StudioItemWhereUniqueInput
  }

  /**
   * StudioItem deleteMany
   */
  export type StudioItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudioItems to delete
     */
    where?: StudioItemWhereInput
  }

  /**
   * StudioItem.userItems
   */
  export type StudioItem$userItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    where?: UserStudioItemWhereInput
    orderBy?: UserStudioItemOrderByWithRelationInput | UserStudioItemOrderByWithRelationInput[]
    cursor?: UserStudioItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStudioItemScalarFieldEnum | UserStudioItemScalarFieldEnum[]
  }

  /**
   * StudioItem without action
   */
  export type StudioItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioItem
     */
    select?: StudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioItemInclude<ExtArgs> | null
  }


  /**
   * Model UserStudioItem
   */

  export type AggregateUserStudioItem = {
    _count: UserStudioItemCountAggregateOutputType | null
    _min: UserStudioItemMinAggregateOutputType | null
    _max: UserStudioItemMaxAggregateOutputType | null
  }

  export type UserStudioItemMinAggregateOutputType = {
    id: string | null
    purchasedAt: Date | null
    userId: string | null
    studioItemId: string | null
  }

  export type UserStudioItemMaxAggregateOutputType = {
    id: string | null
    purchasedAt: Date | null
    userId: string | null
    studioItemId: string | null
  }

  export type UserStudioItemCountAggregateOutputType = {
    id: number
    purchasedAt: number
    userId: number
    studioItemId: number
    _all: number
  }


  export type UserStudioItemMinAggregateInputType = {
    id?: true
    purchasedAt?: true
    userId?: true
    studioItemId?: true
  }

  export type UserStudioItemMaxAggregateInputType = {
    id?: true
    purchasedAt?: true
    userId?: true
    studioItemId?: true
  }

  export type UserStudioItemCountAggregateInputType = {
    id?: true
    purchasedAt?: true
    userId?: true
    studioItemId?: true
    _all?: true
  }

  export type UserStudioItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStudioItem to aggregate.
     */
    where?: UserStudioItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStudioItems to fetch.
     */
    orderBy?: UserStudioItemOrderByWithRelationInput | UserStudioItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStudioItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStudioItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStudioItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStudioItems
    **/
    _count?: true | UserStudioItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStudioItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStudioItemMaxAggregateInputType
  }

  export type GetUserStudioItemAggregateType<T extends UserStudioItemAggregateArgs> = {
        [P in keyof T & keyof AggregateUserStudioItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserStudioItem[P]>
      : GetScalarType<T[P], AggregateUserStudioItem[P]>
  }




  export type UserStudioItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStudioItemWhereInput
    orderBy?: UserStudioItemOrderByWithAggregationInput | UserStudioItemOrderByWithAggregationInput[]
    by: UserStudioItemScalarFieldEnum[] | UserStudioItemScalarFieldEnum
    having?: UserStudioItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStudioItemCountAggregateInputType | true
    _min?: UserStudioItemMinAggregateInputType
    _max?: UserStudioItemMaxAggregateInputType
  }

  export type UserStudioItemGroupByOutputType = {
    id: string
    purchasedAt: Date
    userId: string
    studioItemId: string
    _count: UserStudioItemCountAggregateOutputType | null
    _min: UserStudioItemMinAggregateOutputType | null
    _max: UserStudioItemMaxAggregateOutputType | null
  }

  type GetUserStudioItemGroupByPayload<T extends UserStudioItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStudioItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStudioItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStudioItemGroupByOutputType[P]>
            : GetScalarType<T[P], UserStudioItemGroupByOutputType[P]>
        }
      >
    >


  export type UserStudioItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    purchasedAt?: boolean
    userId?: boolean
    studioItemId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    studioItem?: boolean | StudioItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStudioItem"]>

  export type UserStudioItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    purchasedAt?: boolean
    userId?: boolean
    studioItemId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    studioItem?: boolean | StudioItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStudioItem"]>

  export type UserStudioItemSelectScalar = {
    id?: boolean
    purchasedAt?: boolean
    userId?: boolean
    studioItemId?: boolean
  }

  export type UserStudioItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    studioItem?: boolean | StudioItemDefaultArgs<ExtArgs>
  }
  export type UserStudioItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    studioItem?: boolean | StudioItemDefaultArgs<ExtArgs>
  }

  export type $UserStudioItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserStudioItem"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      studioItem: Prisma.$StudioItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      purchasedAt: Date
      userId: string
      studioItemId: string
    }, ExtArgs["result"]["userStudioItem"]>
    composites: {}
  }

  type UserStudioItemGetPayload<S extends boolean | null | undefined | UserStudioItemDefaultArgs> = $Result.GetResult<Prisma.$UserStudioItemPayload, S>

  type UserStudioItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserStudioItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserStudioItemCountAggregateInputType | true
    }

  export interface UserStudioItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStudioItem'], meta: { name: 'UserStudioItem' } }
    /**
     * Find zero or one UserStudioItem that matches the filter.
     * @param {UserStudioItemFindUniqueArgs} args - Arguments to find a UserStudioItem
     * @example
     * // Get one UserStudioItem
     * const userStudioItem = await prisma.userStudioItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStudioItemFindUniqueArgs>(args: SelectSubset<T, UserStudioItemFindUniqueArgs<ExtArgs>>): Prisma__UserStudioItemClient<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserStudioItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserStudioItemFindUniqueOrThrowArgs} args - Arguments to find a UserStudioItem
     * @example
     * // Get one UserStudioItem
     * const userStudioItem = await prisma.userStudioItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStudioItemFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStudioItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStudioItemClient<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserStudioItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudioItemFindFirstArgs} args - Arguments to find a UserStudioItem
     * @example
     * // Get one UserStudioItem
     * const userStudioItem = await prisma.userStudioItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStudioItemFindFirstArgs>(args?: SelectSubset<T, UserStudioItemFindFirstArgs<ExtArgs>>): Prisma__UserStudioItemClient<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserStudioItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudioItemFindFirstOrThrowArgs} args - Arguments to find a UserStudioItem
     * @example
     * // Get one UserStudioItem
     * const userStudioItem = await prisma.userStudioItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStudioItemFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStudioItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStudioItemClient<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserStudioItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudioItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStudioItems
     * const userStudioItems = await prisma.userStudioItem.findMany()
     * 
     * // Get first 10 UserStudioItems
     * const userStudioItems = await prisma.userStudioItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userStudioItemWithIdOnly = await prisma.userStudioItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserStudioItemFindManyArgs>(args?: SelectSubset<T, UserStudioItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserStudioItem.
     * @param {UserStudioItemCreateArgs} args - Arguments to create a UserStudioItem.
     * @example
     * // Create one UserStudioItem
     * const UserStudioItem = await prisma.userStudioItem.create({
     *   data: {
     *     // ... data to create a UserStudioItem
     *   }
     * })
     * 
     */
    create<T extends UserStudioItemCreateArgs>(args: SelectSubset<T, UserStudioItemCreateArgs<ExtArgs>>): Prisma__UserStudioItemClient<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserStudioItems.
     * @param {UserStudioItemCreateManyArgs} args - Arguments to create many UserStudioItems.
     * @example
     * // Create many UserStudioItems
     * const userStudioItem = await prisma.userStudioItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStudioItemCreateManyArgs>(args?: SelectSubset<T, UserStudioItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserStudioItems and returns the data saved in the database.
     * @param {UserStudioItemCreateManyAndReturnArgs} args - Arguments to create many UserStudioItems.
     * @example
     * // Create many UserStudioItems
     * const userStudioItem = await prisma.userStudioItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserStudioItems and only return the `id`
     * const userStudioItemWithIdOnly = await prisma.userStudioItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserStudioItemCreateManyAndReturnArgs>(args?: SelectSubset<T, UserStudioItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserStudioItem.
     * @param {UserStudioItemDeleteArgs} args - Arguments to delete one UserStudioItem.
     * @example
     * // Delete one UserStudioItem
     * const UserStudioItem = await prisma.userStudioItem.delete({
     *   where: {
     *     // ... filter to delete one UserStudioItem
     *   }
     * })
     * 
     */
    delete<T extends UserStudioItemDeleteArgs>(args: SelectSubset<T, UserStudioItemDeleteArgs<ExtArgs>>): Prisma__UserStudioItemClient<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserStudioItem.
     * @param {UserStudioItemUpdateArgs} args - Arguments to update one UserStudioItem.
     * @example
     * // Update one UserStudioItem
     * const userStudioItem = await prisma.userStudioItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStudioItemUpdateArgs>(args: SelectSubset<T, UserStudioItemUpdateArgs<ExtArgs>>): Prisma__UserStudioItemClient<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserStudioItems.
     * @param {UserStudioItemDeleteManyArgs} args - Arguments to filter UserStudioItems to delete.
     * @example
     * // Delete a few UserStudioItems
     * const { count } = await prisma.userStudioItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStudioItemDeleteManyArgs>(args?: SelectSubset<T, UserStudioItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStudioItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudioItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStudioItems
     * const userStudioItem = await prisma.userStudioItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStudioItemUpdateManyArgs>(args: SelectSubset<T, UserStudioItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserStudioItem.
     * @param {UserStudioItemUpsertArgs} args - Arguments to update or create a UserStudioItem.
     * @example
     * // Update or create a UserStudioItem
     * const userStudioItem = await prisma.userStudioItem.upsert({
     *   create: {
     *     // ... data to create a UserStudioItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserStudioItem we want to update
     *   }
     * })
     */
    upsert<T extends UserStudioItemUpsertArgs>(args: SelectSubset<T, UserStudioItemUpsertArgs<ExtArgs>>): Prisma__UserStudioItemClient<$Result.GetResult<Prisma.$UserStudioItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserStudioItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudioItemCountArgs} args - Arguments to filter UserStudioItems to count.
     * @example
     * // Count the number of UserStudioItems
     * const count = await prisma.userStudioItem.count({
     *   where: {
     *     // ... the filter for the UserStudioItems we want to count
     *   }
     * })
    **/
    count<T extends UserStudioItemCountArgs>(
      args?: Subset<T, UserStudioItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStudioItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserStudioItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudioItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStudioItemAggregateArgs>(args: Subset<T, UserStudioItemAggregateArgs>): Prisma.PrismaPromise<GetUserStudioItemAggregateType<T>>

    /**
     * Group by UserStudioItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudioItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStudioItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStudioItemGroupByArgs['orderBy'] }
        : { orderBy?: UserStudioItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStudioItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStudioItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserStudioItem model
   */
  readonly fields: UserStudioItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserStudioItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStudioItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    studioItem<T extends StudioItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudioItemDefaultArgs<ExtArgs>>): Prisma__StudioItemClient<$Result.GetResult<Prisma.$StudioItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserStudioItem model
   */ 
  interface UserStudioItemFieldRefs {
    readonly id: FieldRef<"UserStudioItem", 'String'>
    readonly purchasedAt: FieldRef<"UserStudioItem", 'DateTime'>
    readonly userId: FieldRef<"UserStudioItem", 'String'>
    readonly studioItemId: FieldRef<"UserStudioItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserStudioItem findUnique
   */
  export type UserStudioItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    /**
     * Filter, which UserStudioItem to fetch.
     */
    where: UserStudioItemWhereUniqueInput
  }

  /**
   * UserStudioItem findUniqueOrThrow
   */
  export type UserStudioItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    /**
     * Filter, which UserStudioItem to fetch.
     */
    where: UserStudioItemWhereUniqueInput
  }

  /**
   * UserStudioItem findFirst
   */
  export type UserStudioItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    /**
     * Filter, which UserStudioItem to fetch.
     */
    where?: UserStudioItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStudioItems to fetch.
     */
    orderBy?: UserStudioItemOrderByWithRelationInput | UserStudioItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStudioItems.
     */
    cursor?: UserStudioItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStudioItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStudioItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStudioItems.
     */
    distinct?: UserStudioItemScalarFieldEnum | UserStudioItemScalarFieldEnum[]
  }

  /**
   * UserStudioItem findFirstOrThrow
   */
  export type UserStudioItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    /**
     * Filter, which UserStudioItem to fetch.
     */
    where?: UserStudioItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStudioItems to fetch.
     */
    orderBy?: UserStudioItemOrderByWithRelationInput | UserStudioItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStudioItems.
     */
    cursor?: UserStudioItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStudioItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStudioItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStudioItems.
     */
    distinct?: UserStudioItemScalarFieldEnum | UserStudioItemScalarFieldEnum[]
  }

  /**
   * UserStudioItem findMany
   */
  export type UserStudioItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    /**
     * Filter, which UserStudioItems to fetch.
     */
    where?: UserStudioItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStudioItems to fetch.
     */
    orderBy?: UserStudioItemOrderByWithRelationInput | UserStudioItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStudioItems.
     */
    cursor?: UserStudioItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStudioItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStudioItems.
     */
    skip?: number
    distinct?: UserStudioItemScalarFieldEnum | UserStudioItemScalarFieldEnum[]
  }

  /**
   * UserStudioItem create
   */
  export type UserStudioItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    /**
     * The data needed to create a UserStudioItem.
     */
    data: XOR<UserStudioItemCreateInput, UserStudioItemUncheckedCreateInput>
  }

  /**
   * UserStudioItem createMany
   */
  export type UserStudioItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStudioItems.
     */
    data: UserStudioItemCreateManyInput | UserStudioItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserStudioItem createManyAndReturn
   */
  export type UserStudioItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserStudioItems.
     */
    data: UserStudioItemCreateManyInput | UserStudioItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStudioItem update
   */
  export type UserStudioItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    /**
     * The data needed to update a UserStudioItem.
     */
    data: XOR<UserStudioItemUpdateInput, UserStudioItemUncheckedUpdateInput>
    /**
     * Choose, which UserStudioItem to update.
     */
    where: UserStudioItemWhereUniqueInput
  }

  /**
   * UserStudioItem updateMany
   */
  export type UserStudioItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStudioItems.
     */
    data: XOR<UserStudioItemUpdateManyMutationInput, UserStudioItemUncheckedUpdateManyInput>
    /**
     * Filter which UserStudioItems to update
     */
    where?: UserStudioItemWhereInput
  }

  /**
   * UserStudioItem upsert
   */
  export type UserStudioItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    /**
     * The filter to search for the UserStudioItem to update in case it exists.
     */
    where: UserStudioItemWhereUniqueInput
    /**
     * In case the UserStudioItem found by the `where` argument doesn't exist, create a new UserStudioItem with this data.
     */
    create: XOR<UserStudioItemCreateInput, UserStudioItemUncheckedCreateInput>
    /**
     * In case the UserStudioItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStudioItemUpdateInput, UserStudioItemUncheckedUpdateInput>
  }

  /**
   * UserStudioItem delete
   */
  export type UserStudioItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
    /**
     * Filter which UserStudioItem to delete.
     */
    where: UserStudioItemWhereUniqueInput
  }

  /**
   * UserStudioItem deleteMany
   */
  export type UserStudioItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStudioItems to delete
     */
    where?: UserStudioItemWhereInput
  }

  /**
   * UserStudioItem without action
   */
  export type UserStudioItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudioItem
     */
    select?: UserStudioItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudioItemInclude<ExtArgs> | null
  }


  /**
   * Model GameEvent
   */

  export type AggregateGameEvent = {
    _count: GameEventCountAggregateOutputType | null
    _avg: GameEventAvgAggregateOutputType | null
    _sum: GameEventSumAggregateOutputType | null
    _min: GameEventMinAggregateOutputType | null
    _max: GameEventMaxAggregateOutputType | null
  }

  export type GameEventAvgAggregateOutputType = {
    rewardAmount: number | null
  }

  export type GameEventSumAggregateOutputType = {
    rewardAmount: number | null
  }

  export type GameEventMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    rewardAmount: number | null
    status: string | null
    createdAt: Date | null
  }

  export type GameEventMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    rewardAmount: number | null
    status: string | null
    createdAt: Date | null
  }

  export type GameEventCountAggregateOutputType = {
    id: number
    name: number
    description: number
    startDate: number
    endDate: number
    requiredGenres: number
    requiredMoods: number
    rewardAmount: number
    status: number
    createdAt: number
    _all: number
  }


  export type GameEventAvgAggregateInputType = {
    rewardAmount?: true
  }

  export type GameEventSumAggregateInputType = {
    rewardAmount?: true
  }

  export type GameEventMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    rewardAmount?: true
    status?: true
    createdAt?: true
  }

  export type GameEventMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    rewardAmount?: true
    status?: true
    createdAt?: true
  }

  export type GameEventCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    requiredGenres?: true
    requiredMoods?: true
    rewardAmount?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type GameEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameEvent to aggregate.
     */
    where?: GameEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameEvents to fetch.
     */
    orderBy?: GameEventOrderByWithRelationInput | GameEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameEvents
    **/
    _count?: true | GameEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameEventMaxAggregateInputType
  }

  export type GetGameEventAggregateType<T extends GameEventAggregateArgs> = {
        [P in keyof T & keyof AggregateGameEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameEvent[P]>
      : GetScalarType<T[P], AggregateGameEvent[P]>
  }




  export type GameEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameEventWhereInput
    orderBy?: GameEventOrderByWithAggregationInput | GameEventOrderByWithAggregationInput[]
    by: GameEventScalarFieldEnum[] | GameEventScalarFieldEnum
    having?: GameEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameEventCountAggregateInputType | true
    _avg?: GameEventAvgAggregateInputType
    _sum?: GameEventSumAggregateInputType
    _min?: GameEventMinAggregateInputType
    _max?: GameEventMaxAggregateInputType
  }

  export type GameEventGroupByOutputType = {
    id: string
    name: string
    description: string
    startDate: Date
    endDate: Date
    requiredGenres: string[]
    requiredMoods: string[]
    rewardAmount: number
    status: string
    createdAt: Date
    _count: GameEventCountAggregateOutputType | null
    _avg: GameEventAvgAggregateOutputType | null
    _sum: GameEventSumAggregateOutputType | null
    _min: GameEventMinAggregateOutputType | null
    _max: GameEventMaxAggregateOutputType | null
  }

  type GetGameEventGroupByPayload<T extends GameEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameEventGroupByOutputType[P]>
            : GetScalarType<T[P], GameEventGroupByOutputType[P]>
        }
      >
    >


  export type GameEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    requiredGenres?: boolean
    requiredMoods?: boolean
    rewardAmount?: boolean
    status?: boolean
    createdAt?: boolean
    participations?: boolean | GameEvent$participationsArgs<ExtArgs>
    _count?: boolean | GameEventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameEvent"]>

  export type GameEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    requiredGenres?: boolean
    requiredMoods?: boolean
    rewardAmount?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["gameEvent"]>

  export type GameEventSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    requiredGenres?: boolean
    requiredMoods?: boolean
    rewardAmount?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type GameEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participations?: boolean | GameEvent$participationsArgs<ExtArgs>
    _count?: boolean | GameEventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GameEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameEvent"
    objects: {
      participations: Prisma.$EventParticipationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      startDate: Date
      endDate: Date
      requiredGenres: string[]
      requiredMoods: string[]
      rewardAmount: number
      status: string
      createdAt: Date
    }, ExtArgs["result"]["gameEvent"]>
    composites: {}
  }

  type GameEventGetPayload<S extends boolean | null | undefined | GameEventDefaultArgs> = $Result.GetResult<Prisma.$GameEventPayload, S>

  type GameEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameEventCountAggregateInputType | true
    }

  export interface GameEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameEvent'], meta: { name: 'GameEvent' } }
    /**
     * Find zero or one GameEvent that matches the filter.
     * @param {GameEventFindUniqueArgs} args - Arguments to find a GameEvent
     * @example
     * // Get one GameEvent
     * const gameEvent = await prisma.gameEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameEventFindUniqueArgs>(args: SelectSubset<T, GameEventFindUniqueArgs<ExtArgs>>): Prisma__GameEventClient<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GameEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GameEventFindUniqueOrThrowArgs} args - Arguments to find a GameEvent
     * @example
     * // Get one GameEvent
     * const gameEvent = await prisma.gameEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameEventFindUniqueOrThrowArgs>(args: SelectSubset<T, GameEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameEventClient<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GameEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameEventFindFirstArgs} args - Arguments to find a GameEvent
     * @example
     * // Get one GameEvent
     * const gameEvent = await prisma.gameEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameEventFindFirstArgs>(args?: SelectSubset<T, GameEventFindFirstArgs<ExtArgs>>): Prisma__GameEventClient<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GameEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameEventFindFirstOrThrowArgs} args - Arguments to find a GameEvent
     * @example
     * // Get one GameEvent
     * const gameEvent = await prisma.gameEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameEventFindFirstOrThrowArgs>(args?: SelectSubset<T, GameEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameEventClient<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GameEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameEvents
     * const gameEvents = await prisma.gameEvent.findMany()
     * 
     * // Get first 10 GameEvents
     * const gameEvents = await prisma.gameEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameEventWithIdOnly = await prisma.gameEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameEventFindManyArgs>(args?: SelectSubset<T, GameEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GameEvent.
     * @param {GameEventCreateArgs} args - Arguments to create a GameEvent.
     * @example
     * // Create one GameEvent
     * const GameEvent = await prisma.gameEvent.create({
     *   data: {
     *     // ... data to create a GameEvent
     *   }
     * })
     * 
     */
    create<T extends GameEventCreateArgs>(args: SelectSubset<T, GameEventCreateArgs<ExtArgs>>): Prisma__GameEventClient<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GameEvents.
     * @param {GameEventCreateManyArgs} args - Arguments to create many GameEvents.
     * @example
     * // Create many GameEvents
     * const gameEvent = await prisma.gameEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameEventCreateManyArgs>(args?: SelectSubset<T, GameEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameEvents and returns the data saved in the database.
     * @param {GameEventCreateManyAndReturnArgs} args - Arguments to create many GameEvents.
     * @example
     * // Create many GameEvents
     * const gameEvent = await prisma.gameEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameEvents and only return the `id`
     * const gameEventWithIdOnly = await prisma.gameEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameEventCreateManyAndReturnArgs>(args?: SelectSubset<T, GameEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GameEvent.
     * @param {GameEventDeleteArgs} args - Arguments to delete one GameEvent.
     * @example
     * // Delete one GameEvent
     * const GameEvent = await prisma.gameEvent.delete({
     *   where: {
     *     // ... filter to delete one GameEvent
     *   }
     * })
     * 
     */
    delete<T extends GameEventDeleteArgs>(args: SelectSubset<T, GameEventDeleteArgs<ExtArgs>>): Prisma__GameEventClient<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GameEvent.
     * @param {GameEventUpdateArgs} args - Arguments to update one GameEvent.
     * @example
     * // Update one GameEvent
     * const gameEvent = await prisma.gameEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameEventUpdateArgs>(args: SelectSubset<T, GameEventUpdateArgs<ExtArgs>>): Prisma__GameEventClient<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GameEvents.
     * @param {GameEventDeleteManyArgs} args - Arguments to filter GameEvents to delete.
     * @example
     * // Delete a few GameEvents
     * const { count } = await prisma.gameEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameEventDeleteManyArgs>(args?: SelectSubset<T, GameEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameEvents
     * const gameEvent = await prisma.gameEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameEventUpdateManyArgs>(args: SelectSubset<T, GameEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameEvent.
     * @param {GameEventUpsertArgs} args - Arguments to update or create a GameEvent.
     * @example
     * // Update or create a GameEvent
     * const gameEvent = await prisma.gameEvent.upsert({
     *   create: {
     *     // ... data to create a GameEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameEvent we want to update
     *   }
     * })
     */
    upsert<T extends GameEventUpsertArgs>(args: SelectSubset<T, GameEventUpsertArgs<ExtArgs>>): Prisma__GameEventClient<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GameEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameEventCountArgs} args - Arguments to filter GameEvents to count.
     * @example
     * // Count the number of GameEvents
     * const count = await prisma.gameEvent.count({
     *   where: {
     *     // ... the filter for the GameEvents we want to count
     *   }
     * })
    **/
    count<T extends GameEventCountArgs>(
      args?: Subset<T, GameEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameEventAggregateArgs>(args: Subset<T, GameEventAggregateArgs>): Prisma.PrismaPromise<GetGameEventAggregateType<T>>

    /**
     * Group by GameEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameEventGroupByArgs['orderBy'] }
        : { orderBy?: GameEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameEvent model
   */
  readonly fields: GameEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participations<T extends GameEvent$participationsArgs<ExtArgs> = {}>(args?: Subset<T, GameEvent$participationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameEvent model
   */ 
  interface GameEventFieldRefs {
    readonly id: FieldRef<"GameEvent", 'String'>
    readonly name: FieldRef<"GameEvent", 'String'>
    readonly description: FieldRef<"GameEvent", 'String'>
    readonly startDate: FieldRef<"GameEvent", 'DateTime'>
    readonly endDate: FieldRef<"GameEvent", 'DateTime'>
    readonly requiredGenres: FieldRef<"GameEvent", 'String[]'>
    readonly requiredMoods: FieldRef<"GameEvent", 'String[]'>
    readonly rewardAmount: FieldRef<"GameEvent", 'Float'>
    readonly status: FieldRef<"GameEvent", 'String'>
    readonly createdAt: FieldRef<"GameEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameEvent findUnique
   */
  export type GameEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameEventInclude<ExtArgs> | null
    /**
     * Filter, which GameEvent to fetch.
     */
    where: GameEventWhereUniqueInput
  }

  /**
   * GameEvent findUniqueOrThrow
   */
  export type GameEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameEventInclude<ExtArgs> | null
    /**
     * Filter, which GameEvent to fetch.
     */
    where: GameEventWhereUniqueInput
  }

  /**
   * GameEvent findFirst
   */
  export type GameEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameEventInclude<ExtArgs> | null
    /**
     * Filter, which GameEvent to fetch.
     */
    where?: GameEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameEvents to fetch.
     */
    orderBy?: GameEventOrderByWithRelationInput | GameEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameEvents.
     */
    cursor?: GameEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameEvents.
     */
    distinct?: GameEventScalarFieldEnum | GameEventScalarFieldEnum[]
  }

  /**
   * GameEvent findFirstOrThrow
   */
  export type GameEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameEventInclude<ExtArgs> | null
    /**
     * Filter, which GameEvent to fetch.
     */
    where?: GameEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameEvents to fetch.
     */
    orderBy?: GameEventOrderByWithRelationInput | GameEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameEvents.
     */
    cursor?: GameEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameEvents.
     */
    distinct?: GameEventScalarFieldEnum | GameEventScalarFieldEnum[]
  }

  /**
   * GameEvent findMany
   */
  export type GameEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameEventInclude<ExtArgs> | null
    /**
     * Filter, which GameEvents to fetch.
     */
    where?: GameEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameEvents to fetch.
     */
    orderBy?: GameEventOrderByWithRelationInput | GameEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameEvents.
     */
    cursor?: GameEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameEvents.
     */
    skip?: number
    distinct?: GameEventScalarFieldEnum | GameEventScalarFieldEnum[]
  }

  /**
   * GameEvent create
   */
  export type GameEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameEventInclude<ExtArgs> | null
    /**
     * The data needed to create a GameEvent.
     */
    data: XOR<GameEventCreateInput, GameEventUncheckedCreateInput>
  }

  /**
   * GameEvent createMany
   */
  export type GameEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameEvents.
     */
    data: GameEventCreateManyInput | GameEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameEvent createManyAndReturn
   */
  export type GameEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GameEvents.
     */
    data: GameEventCreateManyInput | GameEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameEvent update
   */
  export type GameEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameEventInclude<ExtArgs> | null
    /**
     * The data needed to update a GameEvent.
     */
    data: XOR<GameEventUpdateInput, GameEventUncheckedUpdateInput>
    /**
     * Choose, which GameEvent to update.
     */
    where: GameEventWhereUniqueInput
  }

  /**
   * GameEvent updateMany
   */
  export type GameEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameEvents.
     */
    data: XOR<GameEventUpdateManyMutationInput, GameEventUncheckedUpdateManyInput>
    /**
     * Filter which GameEvents to update
     */
    where?: GameEventWhereInput
  }

  /**
   * GameEvent upsert
   */
  export type GameEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameEventInclude<ExtArgs> | null
    /**
     * The filter to search for the GameEvent to update in case it exists.
     */
    where: GameEventWhereUniqueInput
    /**
     * In case the GameEvent found by the `where` argument doesn't exist, create a new GameEvent with this data.
     */
    create: XOR<GameEventCreateInput, GameEventUncheckedCreateInput>
    /**
     * In case the GameEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameEventUpdateInput, GameEventUncheckedUpdateInput>
  }

  /**
   * GameEvent delete
   */
  export type GameEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameEventInclude<ExtArgs> | null
    /**
     * Filter which GameEvent to delete.
     */
    where: GameEventWhereUniqueInput
  }

  /**
   * GameEvent deleteMany
   */
  export type GameEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameEvents to delete
     */
    where?: GameEventWhereInput
  }

  /**
   * GameEvent.participations
   */
  export type GameEvent$participationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    where?: EventParticipationWhereInput
    orderBy?: EventParticipationOrderByWithRelationInput | EventParticipationOrderByWithRelationInput[]
    cursor?: EventParticipationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventParticipationScalarFieldEnum | EventParticipationScalarFieldEnum[]
  }

  /**
   * GameEvent without action
   */
  export type GameEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameEvent
     */
    select?: GameEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameEventInclude<ExtArgs> | null
  }


  /**
   * Model EventParticipation
   */

  export type AggregateEventParticipation = {
    _count: EventParticipationCountAggregateOutputType | null
    _avg: EventParticipationAvgAggregateOutputType | null
    _sum: EventParticipationSumAggregateOutputType | null
    _min: EventParticipationMinAggregateOutputType | null
    _max: EventParticipationMaxAggregateOutputType | null
  }

  export type EventParticipationAvgAggregateOutputType = {
    score: number | null
  }

  export type EventParticipationSumAggregateOutputType = {
    score: number | null
  }

  export type EventParticipationMinAggregateOutputType = {
    id: string | null
    joinedAt: Date | null
    score: number | null
    userId: string | null
    eventId: string | null
    trackId: string | null
  }

  export type EventParticipationMaxAggregateOutputType = {
    id: string | null
    joinedAt: Date | null
    score: number | null
    userId: string | null
    eventId: string | null
    trackId: string | null
  }

  export type EventParticipationCountAggregateOutputType = {
    id: number
    joinedAt: number
    score: number
    userId: number
    eventId: number
    trackId: number
    _all: number
  }


  export type EventParticipationAvgAggregateInputType = {
    score?: true
  }

  export type EventParticipationSumAggregateInputType = {
    score?: true
  }

  export type EventParticipationMinAggregateInputType = {
    id?: true
    joinedAt?: true
    score?: true
    userId?: true
    eventId?: true
    trackId?: true
  }

  export type EventParticipationMaxAggregateInputType = {
    id?: true
    joinedAt?: true
    score?: true
    userId?: true
    eventId?: true
    trackId?: true
  }

  export type EventParticipationCountAggregateInputType = {
    id?: true
    joinedAt?: true
    score?: true
    userId?: true
    eventId?: true
    trackId?: true
    _all?: true
  }

  export type EventParticipationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventParticipation to aggregate.
     */
    where?: EventParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventParticipations to fetch.
     */
    orderBy?: EventParticipationOrderByWithRelationInput | EventParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventParticipations
    **/
    _count?: true | EventParticipationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventParticipationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventParticipationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventParticipationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventParticipationMaxAggregateInputType
  }

  export type GetEventParticipationAggregateType<T extends EventParticipationAggregateArgs> = {
        [P in keyof T & keyof AggregateEventParticipation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventParticipation[P]>
      : GetScalarType<T[P], AggregateEventParticipation[P]>
  }




  export type EventParticipationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventParticipationWhereInput
    orderBy?: EventParticipationOrderByWithAggregationInput | EventParticipationOrderByWithAggregationInput[]
    by: EventParticipationScalarFieldEnum[] | EventParticipationScalarFieldEnum
    having?: EventParticipationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventParticipationCountAggregateInputType | true
    _avg?: EventParticipationAvgAggregateInputType
    _sum?: EventParticipationSumAggregateInputType
    _min?: EventParticipationMinAggregateInputType
    _max?: EventParticipationMaxAggregateInputType
  }

  export type EventParticipationGroupByOutputType = {
    id: string
    joinedAt: Date
    score: number
    userId: string
    eventId: string
    trackId: string
    _count: EventParticipationCountAggregateOutputType | null
    _avg: EventParticipationAvgAggregateOutputType | null
    _sum: EventParticipationSumAggregateOutputType | null
    _min: EventParticipationMinAggregateOutputType | null
    _max: EventParticipationMaxAggregateOutputType | null
  }

  type GetEventParticipationGroupByPayload<T extends EventParticipationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventParticipationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventParticipationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventParticipationGroupByOutputType[P]>
            : GetScalarType<T[P], EventParticipationGroupByOutputType[P]>
        }
      >
    >


  export type EventParticipationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joinedAt?: boolean
    score?: boolean
    userId?: boolean
    eventId?: boolean
    trackId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | GameEventDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventParticipation"]>

  export type EventParticipationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joinedAt?: boolean
    score?: boolean
    userId?: boolean
    eventId?: boolean
    trackId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | GameEventDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventParticipation"]>

  export type EventParticipationSelectScalar = {
    id?: boolean
    joinedAt?: boolean
    score?: boolean
    userId?: boolean
    eventId?: boolean
    trackId?: boolean
  }

  export type EventParticipationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | GameEventDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }
  export type EventParticipationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | GameEventDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }

  export type $EventParticipationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventParticipation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      event: Prisma.$GameEventPayload<ExtArgs>
      track: Prisma.$TrackPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      joinedAt: Date
      score: number
      userId: string
      eventId: string
      trackId: string
    }, ExtArgs["result"]["eventParticipation"]>
    composites: {}
  }

  type EventParticipationGetPayload<S extends boolean | null | undefined | EventParticipationDefaultArgs> = $Result.GetResult<Prisma.$EventParticipationPayload, S>

  type EventParticipationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventParticipationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventParticipationCountAggregateInputType | true
    }

  export interface EventParticipationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventParticipation'], meta: { name: 'EventParticipation' } }
    /**
     * Find zero or one EventParticipation that matches the filter.
     * @param {EventParticipationFindUniqueArgs} args - Arguments to find a EventParticipation
     * @example
     * // Get one EventParticipation
     * const eventParticipation = await prisma.eventParticipation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventParticipationFindUniqueArgs>(args: SelectSubset<T, EventParticipationFindUniqueArgs<ExtArgs>>): Prisma__EventParticipationClient<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventParticipation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventParticipationFindUniqueOrThrowArgs} args - Arguments to find a EventParticipation
     * @example
     * // Get one EventParticipation
     * const eventParticipation = await prisma.eventParticipation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventParticipationFindUniqueOrThrowArgs>(args: SelectSubset<T, EventParticipationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventParticipationClient<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventParticipation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipationFindFirstArgs} args - Arguments to find a EventParticipation
     * @example
     * // Get one EventParticipation
     * const eventParticipation = await prisma.eventParticipation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventParticipationFindFirstArgs>(args?: SelectSubset<T, EventParticipationFindFirstArgs<ExtArgs>>): Prisma__EventParticipationClient<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventParticipation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipationFindFirstOrThrowArgs} args - Arguments to find a EventParticipation
     * @example
     * // Get one EventParticipation
     * const eventParticipation = await prisma.eventParticipation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventParticipationFindFirstOrThrowArgs>(args?: SelectSubset<T, EventParticipationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventParticipationClient<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventParticipations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventParticipations
     * const eventParticipations = await prisma.eventParticipation.findMany()
     * 
     * // Get first 10 EventParticipations
     * const eventParticipations = await prisma.eventParticipation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventParticipationWithIdOnly = await prisma.eventParticipation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventParticipationFindManyArgs>(args?: SelectSubset<T, EventParticipationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventParticipation.
     * @param {EventParticipationCreateArgs} args - Arguments to create a EventParticipation.
     * @example
     * // Create one EventParticipation
     * const EventParticipation = await prisma.eventParticipation.create({
     *   data: {
     *     // ... data to create a EventParticipation
     *   }
     * })
     * 
     */
    create<T extends EventParticipationCreateArgs>(args: SelectSubset<T, EventParticipationCreateArgs<ExtArgs>>): Prisma__EventParticipationClient<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventParticipations.
     * @param {EventParticipationCreateManyArgs} args - Arguments to create many EventParticipations.
     * @example
     * // Create many EventParticipations
     * const eventParticipation = await prisma.eventParticipation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventParticipationCreateManyArgs>(args?: SelectSubset<T, EventParticipationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventParticipations and returns the data saved in the database.
     * @param {EventParticipationCreateManyAndReturnArgs} args - Arguments to create many EventParticipations.
     * @example
     * // Create many EventParticipations
     * const eventParticipation = await prisma.eventParticipation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventParticipations and only return the `id`
     * const eventParticipationWithIdOnly = await prisma.eventParticipation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventParticipationCreateManyAndReturnArgs>(args?: SelectSubset<T, EventParticipationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EventParticipation.
     * @param {EventParticipationDeleteArgs} args - Arguments to delete one EventParticipation.
     * @example
     * // Delete one EventParticipation
     * const EventParticipation = await prisma.eventParticipation.delete({
     *   where: {
     *     // ... filter to delete one EventParticipation
     *   }
     * })
     * 
     */
    delete<T extends EventParticipationDeleteArgs>(args: SelectSubset<T, EventParticipationDeleteArgs<ExtArgs>>): Prisma__EventParticipationClient<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventParticipation.
     * @param {EventParticipationUpdateArgs} args - Arguments to update one EventParticipation.
     * @example
     * // Update one EventParticipation
     * const eventParticipation = await prisma.eventParticipation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventParticipationUpdateArgs>(args: SelectSubset<T, EventParticipationUpdateArgs<ExtArgs>>): Prisma__EventParticipationClient<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventParticipations.
     * @param {EventParticipationDeleteManyArgs} args - Arguments to filter EventParticipations to delete.
     * @example
     * // Delete a few EventParticipations
     * const { count } = await prisma.eventParticipation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventParticipationDeleteManyArgs>(args?: SelectSubset<T, EventParticipationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventParticipations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventParticipations
     * const eventParticipation = await prisma.eventParticipation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventParticipationUpdateManyArgs>(args: SelectSubset<T, EventParticipationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventParticipation.
     * @param {EventParticipationUpsertArgs} args - Arguments to update or create a EventParticipation.
     * @example
     * // Update or create a EventParticipation
     * const eventParticipation = await prisma.eventParticipation.upsert({
     *   create: {
     *     // ... data to create a EventParticipation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventParticipation we want to update
     *   }
     * })
     */
    upsert<T extends EventParticipationUpsertArgs>(args: SelectSubset<T, EventParticipationUpsertArgs<ExtArgs>>): Prisma__EventParticipationClient<$Result.GetResult<Prisma.$EventParticipationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventParticipations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipationCountArgs} args - Arguments to filter EventParticipations to count.
     * @example
     * // Count the number of EventParticipations
     * const count = await prisma.eventParticipation.count({
     *   where: {
     *     // ... the filter for the EventParticipations we want to count
     *   }
     * })
    **/
    count<T extends EventParticipationCountArgs>(
      args?: Subset<T, EventParticipationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventParticipationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventParticipation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventParticipationAggregateArgs>(args: Subset<T, EventParticipationAggregateArgs>): Prisma.PrismaPromise<GetEventParticipationAggregateType<T>>

    /**
     * Group by EventParticipation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventParticipationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventParticipationGroupByArgs['orderBy'] }
        : { orderBy?: EventParticipationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventParticipationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventParticipationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventParticipation model
   */
  readonly fields: EventParticipationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventParticipation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventParticipationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    event<T extends GameEventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameEventDefaultArgs<ExtArgs>>): Prisma__GameEventClient<$Result.GetResult<Prisma.$GameEventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    track<T extends TrackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TrackDefaultArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventParticipation model
   */ 
  interface EventParticipationFieldRefs {
    readonly id: FieldRef<"EventParticipation", 'String'>
    readonly joinedAt: FieldRef<"EventParticipation", 'DateTime'>
    readonly score: FieldRef<"EventParticipation", 'Float'>
    readonly userId: FieldRef<"EventParticipation", 'String'>
    readonly eventId: FieldRef<"EventParticipation", 'String'>
    readonly trackId: FieldRef<"EventParticipation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EventParticipation findUnique
   */
  export type EventParticipationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    /**
     * Filter, which EventParticipation to fetch.
     */
    where: EventParticipationWhereUniqueInput
  }

  /**
   * EventParticipation findUniqueOrThrow
   */
  export type EventParticipationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    /**
     * Filter, which EventParticipation to fetch.
     */
    where: EventParticipationWhereUniqueInput
  }

  /**
   * EventParticipation findFirst
   */
  export type EventParticipationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    /**
     * Filter, which EventParticipation to fetch.
     */
    where?: EventParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventParticipations to fetch.
     */
    orderBy?: EventParticipationOrderByWithRelationInput | EventParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventParticipations.
     */
    cursor?: EventParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventParticipations.
     */
    distinct?: EventParticipationScalarFieldEnum | EventParticipationScalarFieldEnum[]
  }

  /**
   * EventParticipation findFirstOrThrow
   */
  export type EventParticipationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    /**
     * Filter, which EventParticipation to fetch.
     */
    where?: EventParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventParticipations to fetch.
     */
    orderBy?: EventParticipationOrderByWithRelationInput | EventParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventParticipations.
     */
    cursor?: EventParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventParticipations.
     */
    distinct?: EventParticipationScalarFieldEnum | EventParticipationScalarFieldEnum[]
  }

  /**
   * EventParticipation findMany
   */
  export type EventParticipationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    /**
     * Filter, which EventParticipations to fetch.
     */
    where?: EventParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventParticipations to fetch.
     */
    orderBy?: EventParticipationOrderByWithRelationInput | EventParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventParticipations.
     */
    cursor?: EventParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventParticipations.
     */
    skip?: number
    distinct?: EventParticipationScalarFieldEnum | EventParticipationScalarFieldEnum[]
  }

  /**
   * EventParticipation create
   */
  export type EventParticipationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    /**
     * The data needed to create a EventParticipation.
     */
    data: XOR<EventParticipationCreateInput, EventParticipationUncheckedCreateInput>
  }

  /**
   * EventParticipation createMany
   */
  export type EventParticipationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventParticipations.
     */
    data: EventParticipationCreateManyInput | EventParticipationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventParticipation createManyAndReturn
   */
  export type EventParticipationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EventParticipations.
     */
    data: EventParticipationCreateManyInput | EventParticipationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventParticipation update
   */
  export type EventParticipationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    /**
     * The data needed to update a EventParticipation.
     */
    data: XOR<EventParticipationUpdateInput, EventParticipationUncheckedUpdateInput>
    /**
     * Choose, which EventParticipation to update.
     */
    where: EventParticipationWhereUniqueInput
  }

  /**
   * EventParticipation updateMany
   */
  export type EventParticipationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventParticipations.
     */
    data: XOR<EventParticipationUpdateManyMutationInput, EventParticipationUncheckedUpdateManyInput>
    /**
     * Filter which EventParticipations to update
     */
    where?: EventParticipationWhereInput
  }

  /**
   * EventParticipation upsert
   */
  export type EventParticipationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    /**
     * The filter to search for the EventParticipation to update in case it exists.
     */
    where: EventParticipationWhereUniqueInput
    /**
     * In case the EventParticipation found by the `where` argument doesn't exist, create a new EventParticipation with this data.
     */
    create: XOR<EventParticipationCreateInput, EventParticipationUncheckedCreateInput>
    /**
     * In case the EventParticipation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventParticipationUpdateInput, EventParticipationUncheckedUpdateInput>
  }

  /**
   * EventParticipation delete
   */
  export type EventParticipationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
    /**
     * Filter which EventParticipation to delete.
     */
    where: EventParticipationWhereUniqueInput
  }

  /**
   * EventParticipation deleteMany
   */
  export type EventParticipationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventParticipations to delete
     */
    where?: EventParticipationWhereInput
  }

  /**
   * EventParticipation without action
   */
  export type EventParticipationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipation
     */
    select?: EventParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipationInclude<ExtArgs> | null
  }


  /**
   * Model Boost
   */

  export type AggregateBoost = {
    _count: BoostCountAggregateOutputType | null
    _avg: BoostAvgAggregateOutputType | null
    _sum: BoostSumAggregateOutputType | null
    _min: BoostMinAggregateOutputType | null
    _max: BoostMaxAggregateOutputType | null
  }

  export type BoostAvgAggregateOutputType = {
    amount: number | null
    duration: number | null
  }

  export type BoostSumAggregateOutputType = {
    amount: number | null
    duration: number | null
  }

  export type BoostMinAggregateOutputType = {
    id: string | null
    amount: number | null
    duration: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
    senderId: string | null
    receiverId: string | null
    trackId: string | null
  }

  export type BoostMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    duration: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
    senderId: string | null
    receiverId: string | null
    trackId: string | null
  }

  export type BoostCountAggregateOutputType = {
    id: number
    amount: number
    duration: number
    startTime: number
    endTime: number
    createdAt: number
    senderId: number
    receiverId: number
    trackId: number
    _all: number
  }


  export type BoostAvgAggregateInputType = {
    amount?: true
    duration?: true
  }

  export type BoostSumAggregateInputType = {
    amount?: true
    duration?: true
  }

  export type BoostMinAggregateInputType = {
    id?: true
    amount?: true
    duration?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    senderId?: true
    receiverId?: true
    trackId?: true
  }

  export type BoostMaxAggregateInputType = {
    id?: true
    amount?: true
    duration?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    senderId?: true
    receiverId?: true
    trackId?: true
  }

  export type BoostCountAggregateInputType = {
    id?: true
    amount?: true
    duration?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    senderId?: true
    receiverId?: true
    trackId?: true
    _all?: true
  }

  export type BoostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boost to aggregate.
     */
    where?: BoostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boosts to fetch.
     */
    orderBy?: BoostOrderByWithRelationInput | BoostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Boosts
    **/
    _count?: true | BoostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoostMaxAggregateInputType
  }

  export type GetBoostAggregateType<T extends BoostAggregateArgs> = {
        [P in keyof T & keyof AggregateBoost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoost[P]>
      : GetScalarType<T[P], AggregateBoost[P]>
  }




  export type BoostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoostWhereInput
    orderBy?: BoostOrderByWithAggregationInput | BoostOrderByWithAggregationInput[]
    by: BoostScalarFieldEnum[] | BoostScalarFieldEnum
    having?: BoostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoostCountAggregateInputType | true
    _avg?: BoostAvgAggregateInputType
    _sum?: BoostSumAggregateInputType
    _min?: BoostMinAggregateInputType
    _max?: BoostMaxAggregateInputType
  }

  export type BoostGroupByOutputType = {
    id: string
    amount: number
    duration: number
    startTime: Date
    endTime: Date
    createdAt: Date
    senderId: string
    receiverId: string
    trackId: string
    _count: BoostCountAggregateOutputType | null
    _avg: BoostAvgAggregateOutputType | null
    _sum: BoostSumAggregateOutputType | null
    _min: BoostMinAggregateOutputType | null
    _max: BoostMaxAggregateOutputType | null
  }

  type GetBoostGroupByPayload<T extends BoostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoostGroupByOutputType[P]>
            : GetScalarType<T[P], BoostGroupByOutputType[P]>
        }
      >
    >


  export type BoostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    duration?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    senderId?: boolean
    receiverId?: boolean
    trackId?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boost"]>

  export type BoostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    duration?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    senderId?: boolean
    receiverId?: boolean
    trackId?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boost"]>

  export type BoostSelectScalar = {
    id?: boolean
    amount?: boolean
    duration?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    senderId?: boolean
    receiverId?: boolean
    trackId?: boolean
  }

  export type BoostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }
  export type BoostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }

  export type $BoostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Boost"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
      track: Prisma.$TrackPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      duration: number
      startTime: Date
      endTime: Date
      createdAt: Date
      senderId: string
      receiverId: string
      trackId: string
    }, ExtArgs["result"]["boost"]>
    composites: {}
  }

  type BoostGetPayload<S extends boolean | null | undefined | BoostDefaultArgs> = $Result.GetResult<Prisma.$BoostPayload, S>

  type BoostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoostCountAggregateInputType | true
    }

  export interface BoostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Boost'], meta: { name: 'Boost' } }
    /**
     * Find zero or one Boost that matches the filter.
     * @param {BoostFindUniqueArgs} args - Arguments to find a Boost
     * @example
     * // Get one Boost
     * const boost = await prisma.boost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BoostFindUniqueArgs>(args: SelectSubset<T, BoostFindUniqueArgs<ExtArgs>>): Prisma__BoostClient<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Boost that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BoostFindUniqueOrThrowArgs} args - Arguments to find a Boost
     * @example
     * // Get one Boost
     * const boost = await prisma.boost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BoostFindUniqueOrThrowArgs>(args: SelectSubset<T, BoostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BoostClient<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Boost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoostFindFirstArgs} args - Arguments to find a Boost
     * @example
     * // Get one Boost
     * const boost = await prisma.boost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BoostFindFirstArgs>(args?: SelectSubset<T, BoostFindFirstArgs<ExtArgs>>): Prisma__BoostClient<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Boost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoostFindFirstOrThrowArgs} args - Arguments to find a Boost
     * @example
     * // Get one Boost
     * const boost = await prisma.boost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BoostFindFirstOrThrowArgs>(args?: SelectSubset<T, BoostFindFirstOrThrowArgs<ExtArgs>>): Prisma__BoostClient<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Boosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Boosts
     * const boosts = await prisma.boost.findMany()
     * 
     * // Get first 10 Boosts
     * const boosts = await prisma.boost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boostWithIdOnly = await prisma.boost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BoostFindManyArgs>(args?: SelectSubset<T, BoostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Boost.
     * @param {BoostCreateArgs} args - Arguments to create a Boost.
     * @example
     * // Create one Boost
     * const Boost = await prisma.boost.create({
     *   data: {
     *     // ... data to create a Boost
     *   }
     * })
     * 
     */
    create<T extends BoostCreateArgs>(args: SelectSubset<T, BoostCreateArgs<ExtArgs>>): Prisma__BoostClient<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Boosts.
     * @param {BoostCreateManyArgs} args - Arguments to create many Boosts.
     * @example
     * // Create many Boosts
     * const boost = await prisma.boost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BoostCreateManyArgs>(args?: SelectSubset<T, BoostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Boosts and returns the data saved in the database.
     * @param {BoostCreateManyAndReturnArgs} args - Arguments to create many Boosts.
     * @example
     * // Create many Boosts
     * const boost = await prisma.boost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Boosts and only return the `id`
     * const boostWithIdOnly = await prisma.boost.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BoostCreateManyAndReturnArgs>(args?: SelectSubset<T, BoostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Boost.
     * @param {BoostDeleteArgs} args - Arguments to delete one Boost.
     * @example
     * // Delete one Boost
     * const Boost = await prisma.boost.delete({
     *   where: {
     *     // ... filter to delete one Boost
     *   }
     * })
     * 
     */
    delete<T extends BoostDeleteArgs>(args: SelectSubset<T, BoostDeleteArgs<ExtArgs>>): Prisma__BoostClient<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Boost.
     * @param {BoostUpdateArgs} args - Arguments to update one Boost.
     * @example
     * // Update one Boost
     * const boost = await prisma.boost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BoostUpdateArgs>(args: SelectSubset<T, BoostUpdateArgs<ExtArgs>>): Prisma__BoostClient<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Boosts.
     * @param {BoostDeleteManyArgs} args - Arguments to filter Boosts to delete.
     * @example
     * // Delete a few Boosts
     * const { count } = await prisma.boost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BoostDeleteManyArgs>(args?: SelectSubset<T, BoostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Boosts
     * const boost = await prisma.boost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BoostUpdateManyArgs>(args: SelectSubset<T, BoostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Boost.
     * @param {BoostUpsertArgs} args - Arguments to update or create a Boost.
     * @example
     * // Update or create a Boost
     * const boost = await prisma.boost.upsert({
     *   create: {
     *     // ... data to create a Boost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Boost we want to update
     *   }
     * })
     */
    upsert<T extends BoostUpsertArgs>(args: SelectSubset<T, BoostUpsertArgs<ExtArgs>>): Prisma__BoostClient<$Result.GetResult<Prisma.$BoostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Boosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoostCountArgs} args - Arguments to filter Boosts to count.
     * @example
     * // Count the number of Boosts
     * const count = await prisma.boost.count({
     *   where: {
     *     // ... the filter for the Boosts we want to count
     *   }
     * })
    **/
    count<T extends BoostCountArgs>(
      args?: Subset<T, BoostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Boost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoostAggregateArgs>(args: Subset<T, BoostAggregateArgs>): Prisma.PrismaPromise<GetBoostAggregateType<T>>

    /**
     * Group by Boost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoostGroupByArgs['orderBy'] }
        : { orderBy?: BoostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Boost model
   */
  readonly fields: BoostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Boost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    track<T extends TrackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TrackDefaultArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Boost model
   */ 
  interface BoostFieldRefs {
    readonly id: FieldRef<"Boost", 'String'>
    readonly amount: FieldRef<"Boost", 'Float'>
    readonly duration: FieldRef<"Boost", 'Int'>
    readonly startTime: FieldRef<"Boost", 'DateTime'>
    readonly endTime: FieldRef<"Boost", 'DateTime'>
    readonly createdAt: FieldRef<"Boost", 'DateTime'>
    readonly senderId: FieldRef<"Boost", 'String'>
    readonly receiverId: FieldRef<"Boost", 'String'>
    readonly trackId: FieldRef<"Boost", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Boost findUnique
   */
  export type BoostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    /**
     * Filter, which Boost to fetch.
     */
    where: BoostWhereUniqueInput
  }

  /**
   * Boost findUniqueOrThrow
   */
  export type BoostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    /**
     * Filter, which Boost to fetch.
     */
    where: BoostWhereUniqueInput
  }

  /**
   * Boost findFirst
   */
  export type BoostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    /**
     * Filter, which Boost to fetch.
     */
    where?: BoostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boosts to fetch.
     */
    orderBy?: BoostOrderByWithRelationInput | BoostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boosts.
     */
    cursor?: BoostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boosts.
     */
    distinct?: BoostScalarFieldEnum | BoostScalarFieldEnum[]
  }

  /**
   * Boost findFirstOrThrow
   */
  export type BoostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    /**
     * Filter, which Boost to fetch.
     */
    where?: BoostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boosts to fetch.
     */
    orderBy?: BoostOrderByWithRelationInput | BoostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boosts.
     */
    cursor?: BoostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boosts.
     */
    distinct?: BoostScalarFieldEnum | BoostScalarFieldEnum[]
  }

  /**
   * Boost findMany
   */
  export type BoostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    /**
     * Filter, which Boosts to fetch.
     */
    where?: BoostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boosts to fetch.
     */
    orderBy?: BoostOrderByWithRelationInput | BoostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Boosts.
     */
    cursor?: BoostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boosts.
     */
    skip?: number
    distinct?: BoostScalarFieldEnum | BoostScalarFieldEnum[]
  }

  /**
   * Boost create
   */
  export type BoostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    /**
     * The data needed to create a Boost.
     */
    data: XOR<BoostCreateInput, BoostUncheckedCreateInput>
  }

  /**
   * Boost createMany
   */
  export type BoostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Boosts.
     */
    data: BoostCreateManyInput | BoostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Boost createManyAndReturn
   */
  export type BoostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Boosts.
     */
    data: BoostCreateManyInput | BoostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Boost update
   */
  export type BoostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    /**
     * The data needed to update a Boost.
     */
    data: XOR<BoostUpdateInput, BoostUncheckedUpdateInput>
    /**
     * Choose, which Boost to update.
     */
    where: BoostWhereUniqueInput
  }

  /**
   * Boost updateMany
   */
  export type BoostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Boosts.
     */
    data: XOR<BoostUpdateManyMutationInput, BoostUncheckedUpdateManyInput>
    /**
     * Filter which Boosts to update
     */
    where?: BoostWhereInput
  }

  /**
   * Boost upsert
   */
  export type BoostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    /**
     * The filter to search for the Boost to update in case it exists.
     */
    where: BoostWhereUniqueInput
    /**
     * In case the Boost found by the `where` argument doesn't exist, create a new Boost with this data.
     */
    create: XOR<BoostCreateInput, BoostUncheckedCreateInput>
    /**
     * In case the Boost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoostUpdateInput, BoostUncheckedUpdateInput>
  }

  /**
   * Boost delete
   */
  export type BoostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
    /**
     * Filter which Boost to delete.
     */
    where: BoostWhereUniqueInput
  }

  /**
   * Boost deleteMany
   */
  export type BoostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boosts to delete
     */
    where?: BoostWhereInput
  }

  /**
   * Boost without action
   */
  export type BoostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boost
     */
    select?: BoostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoostInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    type: string | null
    amount: number | null
    description: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    type: string | null
    amount: number | null
    description: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    type: number
    amount: number
    description: number
    createdAt: number
    userId: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    description?: true
    createdAt?: true
    userId?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    description?: true
    createdAt?: true
    userId?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    description?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    type: string
    amount: number
    description: string
    createdAt: Date
    userId: string
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      amount: number
      description: string
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly type: FieldRef<"Transaction", 'String'>
    readonly amount: FieldRef<"Transaction", 'Float'>
    readonly description: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly userId: FieldRef<"Transaction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model GameCycle
   */

  export type AggregateGameCycle = {
    _count: GameCycleCountAggregateOutputType | null
    _avg: GameCycleAvgAggregateOutputType | null
    _sum: GameCycleSumAggregateOutputType | null
    _min: GameCycleMinAggregateOutputType | null
    _max: GameCycleMaxAggregateOutputType | null
  }

  export type GameCycleAvgAggregateOutputType = {
    cycleNumber: number | null
  }

  export type GameCycleSumAggregateOutputType = {
    cycleNumber: number | null
  }

  export type GameCycleMinAggregateOutputType = {
    id: string | null
    startDate: Date | null
    endDate: Date | null
    cycleNumber: number | null
    status: string | null
    createdAt: Date | null
  }

  export type GameCycleMaxAggregateOutputType = {
    id: string | null
    startDate: Date | null
    endDate: Date | null
    cycleNumber: number | null
    status: string | null
    createdAt: Date | null
  }

  export type GameCycleCountAggregateOutputType = {
    id: number
    startDate: number
    endDate: number
    cycleNumber: number
    status: number
    createdAt: number
    _all: number
  }


  export type GameCycleAvgAggregateInputType = {
    cycleNumber?: true
  }

  export type GameCycleSumAggregateInputType = {
    cycleNumber?: true
  }

  export type GameCycleMinAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    cycleNumber?: true
    status?: true
    createdAt?: true
  }

  export type GameCycleMaxAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    cycleNumber?: true
    status?: true
    createdAt?: true
  }

  export type GameCycleCountAggregateInputType = {
    id?: true
    startDate?: true
    endDate?: true
    cycleNumber?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type GameCycleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameCycle to aggregate.
     */
    where?: GameCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCycles to fetch.
     */
    orderBy?: GameCycleOrderByWithRelationInput | GameCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameCycles
    **/
    _count?: true | GameCycleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameCycleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameCycleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameCycleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameCycleMaxAggregateInputType
  }

  export type GetGameCycleAggregateType<T extends GameCycleAggregateArgs> = {
        [P in keyof T & keyof AggregateGameCycle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameCycle[P]>
      : GetScalarType<T[P], AggregateGameCycle[P]>
  }




  export type GameCycleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameCycleWhereInput
    orderBy?: GameCycleOrderByWithAggregationInput | GameCycleOrderByWithAggregationInput[]
    by: GameCycleScalarFieldEnum[] | GameCycleScalarFieldEnum
    having?: GameCycleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCycleCountAggregateInputType | true
    _avg?: GameCycleAvgAggregateInputType
    _sum?: GameCycleSumAggregateInputType
    _min?: GameCycleMinAggregateInputType
    _max?: GameCycleMaxAggregateInputType
  }

  export type GameCycleGroupByOutputType = {
    id: string
    startDate: Date
    endDate: Date
    cycleNumber: number
    status: string
    createdAt: Date
    _count: GameCycleCountAggregateOutputType | null
    _avg: GameCycleAvgAggregateOutputType | null
    _sum: GameCycleSumAggregateOutputType | null
    _min: GameCycleMinAggregateOutputType | null
    _max: GameCycleMaxAggregateOutputType | null
  }

  type GetGameCycleGroupByPayload<T extends GameCycleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameCycleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameCycleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameCycleGroupByOutputType[P]>
            : GetScalarType<T[P], GameCycleGroupByOutputType[P]>
        }
      >
    >


  export type GameCycleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    cycleNumber?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["gameCycle"]>

  export type GameCycleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    cycleNumber?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["gameCycle"]>

  export type GameCycleSelectScalar = {
    id?: boolean
    startDate?: boolean
    endDate?: boolean
    cycleNumber?: boolean
    status?: boolean
    createdAt?: boolean
  }


  export type $GameCyclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameCycle"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      startDate: Date
      endDate: Date
      cycleNumber: number
      status: string
      createdAt: Date
    }, ExtArgs["result"]["gameCycle"]>
    composites: {}
  }

  type GameCycleGetPayload<S extends boolean | null | undefined | GameCycleDefaultArgs> = $Result.GetResult<Prisma.$GameCyclePayload, S>

  type GameCycleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameCycleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameCycleCountAggregateInputType | true
    }

  export interface GameCycleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameCycle'], meta: { name: 'GameCycle' } }
    /**
     * Find zero or one GameCycle that matches the filter.
     * @param {GameCycleFindUniqueArgs} args - Arguments to find a GameCycle
     * @example
     * // Get one GameCycle
     * const gameCycle = await prisma.gameCycle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameCycleFindUniqueArgs>(args: SelectSubset<T, GameCycleFindUniqueArgs<ExtArgs>>): Prisma__GameCycleClient<$Result.GetResult<Prisma.$GameCyclePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GameCycle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GameCycleFindUniqueOrThrowArgs} args - Arguments to find a GameCycle
     * @example
     * // Get one GameCycle
     * const gameCycle = await prisma.gameCycle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameCycleFindUniqueOrThrowArgs>(args: SelectSubset<T, GameCycleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameCycleClient<$Result.GetResult<Prisma.$GameCyclePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GameCycle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCycleFindFirstArgs} args - Arguments to find a GameCycle
     * @example
     * // Get one GameCycle
     * const gameCycle = await prisma.gameCycle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameCycleFindFirstArgs>(args?: SelectSubset<T, GameCycleFindFirstArgs<ExtArgs>>): Prisma__GameCycleClient<$Result.GetResult<Prisma.$GameCyclePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GameCycle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCycleFindFirstOrThrowArgs} args - Arguments to find a GameCycle
     * @example
     * // Get one GameCycle
     * const gameCycle = await prisma.gameCycle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameCycleFindFirstOrThrowArgs>(args?: SelectSubset<T, GameCycleFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameCycleClient<$Result.GetResult<Prisma.$GameCyclePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GameCycles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCycleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameCycles
     * const gameCycles = await prisma.gameCycle.findMany()
     * 
     * // Get first 10 GameCycles
     * const gameCycles = await prisma.gameCycle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameCycleWithIdOnly = await prisma.gameCycle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameCycleFindManyArgs>(args?: SelectSubset<T, GameCycleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameCyclePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GameCycle.
     * @param {GameCycleCreateArgs} args - Arguments to create a GameCycle.
     * @example
     * // Create one GameCycle
     * const GameCycle = await prisma.gameCycle.create({
     *   data: {
     *     // ... data to create a GameCycle
     *   }
     * })
     * 
     */
    create<T extends GameCycleCreateArgs>(args: SelectSubset<T, GameCycleCreateArgs<ExtArgs>>): Prisma__GameCycleClient<$Result.GetResult<Prisma.$GameCyclePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GameCycles.
     * @param {GameCycleCreateManyArgs} args - Arguments to create many GameCycles.
     * @example
     * // Create many GameCycles
     * const gameCycle = await prisma.gameCycle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCycleCreateManyArgs>(args?: SelectSubset<T, GameCycleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameCycles and returns the data saved in the database.
     * @param {GameCycleCreateManyAndReturnArgs} args - Arguments to create many GameCycles.
     * @example
     * // Create many GameCycles
     * const gameCycle = await prisma.gameCycle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameCycles and only return the `id`
     * const gameCycleWithIdOnly = await prisma.gameCycle.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCycleCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCycleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameCyclePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GameCycle.
     * @param {GameCycleDeleteArgs} args - Arguments to delete one GameCycle.
     * @example
     * // Delete one GameCycle
     * const GameCycle = await prisma.gameCycle.delete({
     *   where: {
     *     // ... filter to delete one GameCycle
     *   }
     * })
     * 
     */
    delete<T extends GameCycleDeleteArgs>(args: SelectSubset<T, GameCycleDeleteArgs<ExtArgs>>): Prisma__GameCycleClient<$Result.GetResult<Prisma.$GameCyclePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GameCycle.
     * @param {GameCycleUpdateArgs} args - Arguments to update one GameCycle.
     * @example
     * // Update one GameCycle
     * const gameCycle = await prisma.gameCycle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameCycleUpdateArgs>(args: SelectSubset<T, GameCycleUpdateArgs<ExtArgs>>): Prisma__GameCycleClient<$Result.GetResult<Prisma.$GameCyclePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GameCycles.
     * @param {GameCycleDeleteManyArgs} args - Arguments to filter GameCycles to delete.
     * @example
     * // Delete a few GameCycles
     * const { count } = await prisma.gameCycle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameCycleDeleteManyArgs>(args?: SelectSubset<T, GameCycleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameCycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCycleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameCycles
     * const gameCycle = await prisma.gameCycle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameCycleUpdateManyArgs>(args: SelectSubset<T, GameCycleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameCycle.
     * @param {GameCycleUpsertArgs} args - Arguments to update or create a GameCycle.
     * @example
     * // Update or create a GameCycle
     * const gameCycle = await prisma.gameCycle.upsert({
     *   create: {
     *     // ... data to create a GameCycle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameCycle we want to update
     *   }
     * })
     */
    upsert<T extends GameCycleUpsertArgs>(args: SelectSubset<T, GameCycleUpsertArgs<ExtArgs>>): Prisma__GameCycleClient<$Result.GetResult<Prisma.$GameCyclePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GameCycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCycleCountArgs} args - Arguments to filter GameCycles to count.
     * @example
     * // Count the number of GameCycles
     * const count = await prisma.gameCycle.count({
     *   where: {
     *     // ... the filter for the GameCycles we want to count
     *   }
     * })
    **/
    count<T extends GameCycleCountArgs>(
      args?: Subset<T, GameCycleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCycleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameCycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCycleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameCycleAggregateArgs>(args: Subset<T, GameCycleAggregateArgs>): Prisma.PrismaPromise<GetGameCycleAggregateType<T>>

    /**
     * Group by GameCycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCycleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameCycleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameCycleGroupByArgs['orderBy'] }
        : { orderBy?: GameCycleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameCycleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameCycleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameCycle model
   */
  readonly fields: GameCycleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameCycle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameCycleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameCycle model
   */ 
  interface GameCycleFieldRefs {
    readonly id: FieldRef<"GameCycle", 'String'>
    readonly startDate: FieldRef<"GameCycle", 'DateTime'>
    readonly endDate: FieldRef<"GameCycle", 'DateTime'>
    readonly cycleNumber: FieldRef<"GameCycle", 'Int'>
    readonly status: FieldRef<"GameCycle", 'String'>
    readonly createdAt: FieldRef<"GameCycle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameCycle findUnique
   */
  export type GameCycleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelect<ExtArgs> | null
    /**
     * Filter, which GameCycle to fetch.
     */
    where: GameCycleWhereUniqueInput
  }

  /**
   * GameCycle findUniqueOrThrow
   */
  export type GameCycleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelect<ExtArgs> | null
    /**
     * Filter, which GameCycle to fetch.
     */
    where: GameCycleWhereUniqueInput
  }

  /**
   * GameCycle findFirst
   */
  export type GameCycleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelect<ExtArgs> | null
    /**
     * Filter, which GameCycle to fetch.
     */
    where?: GameCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCycles to fetch.
     */
    orderBy?: GameCycleOrderByWithRelationInput | GameCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameCycles.
     */
    cursor?: GameCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameCycles.
     */
    distinct?: GameCycleScalarFieldEnum | GameCycleScalarFieldEnum[]
  }

  /**
   * GameCycle findFirstOrThrow
   */
  export type GameCycleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelect<ExtArgs> | null
    /**
     * Filter, which GameCycle to fetch.
     */
    where?: GameCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCycles to fetch.
     */
    orderBy?: GameCycleOrderByWithRelationInput | GameCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameCycles.
     */
    cursor?: GameCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameCycles.
     */
    distinct?: GameCycleScalarFieldEnum | GameCycleScalarFieldEnum[]
  }

  /**
   * GameCycle findMany
   */
  export type GameCycleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelect<ExtArgs> | null
    /**
     * Filter, which GameCycles to fetch.
     */
    where?: GameCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCycles to fetch.
     */
    orderBy?: GameCycleOrderByWithRelationInput | GameCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameCycles.
     */
    cursor?: GameCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCycles.
     */
    skip?: number
    distinct?: GameCycleScalarFieldEnum | GameCycleScalarFieldEnum[]
  }

  /**
   * GameCycle create
   */
  export type GameCycleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelect<ExtArgs> | null
    /**
     * The data needed to create a GameCycle.
     */
    data: XOR<GameCycleCreateInput, GameCycleUncheckedCreateInput>
  }

  /**
   * GameCycle createMany
   */
  export type GameCycleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameCycles.
     */
    data: GameCycleCreateManyInput | GameCycleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameCycle createManyAndReturn
   */
  export type GameCycleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GameCycles.
     */
    data: GameCycleCreateManyInput | GameCycleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameCycle update
   */
  export type GameCycleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelect<ExtArgs> | null
    /**
     * The data needed to update a GameCycle.
     */
    data: XOR<GameCycleUpdateInput, GameCycleUncheckedUpdateInput>
    /**
     * Choose, which GameCycle to update.
     */
    where: GameCycleWhereUniqueInput
  }

  /**
   * GameCycle updateMany
   */
  export type GameCycleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameCycles.
     */
    data: XOR<GameCycleUpdateManyMutationInput, GameCycleUncheckedUpdateManyInput>
    /**
     * Filter which GameCycles to update
     */
    where?: GameCycleWhereInput
  }

  /**
   * GameCycle upsert
   */
  export type GameCycleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelect<ExtArgs> | null
    /**
     * The filter to search for the GameCycle to update in case it exists.
     */
    where: GameCycleWhereUniqueInput
    /**
     * In case the GameCycle found by the `where` argument doesn't exist, create a new GameCycle with this data.
     */
    create: XOR<GameCycleCreateInput, GameCycleUncheckedCreateInput>
    /**
     * In case the GameCycle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameCycleUpdateInput, GameCycleUncheckedUpdateInput>
  }

  /**
   * GameCycle delete
   */
  export type GameCycleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelect<ExtArgs> | null
    /**
     * Filter which GameCycle to delete.
     */
    where: GameCycleWhereUniqueInput
  }

  /**
   * GameCycle deleteMany
   */
  export type GameCycleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameCycles to delete
     */
    where?: GameCycleWhereInput
  }

  /**
   * GameCycle without action
   */
  export type GameCycleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCycle
     */
    select?: GameCycleSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    soundcloudId: 'soundcloudId',
    username: 'username',
    email: 'email',
    infosargent: 'infosargent',
    level: 'level',
    experience: 'experience',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TrackScalarFieldEnum: {
    id: 'id',
    soundcloudTrackId: 'soundcloudTrackId',
    title: 'title',
    artwork: 'artwork',
    genre: 'genre',
    mood: 'mood',
    baseValue: 'baseValue',
    currentValue: 'currentValue',
    playCount: 'playCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type TrackScalarFieldEnum = (typeof TrackScalarFieldEnum)[keyof typeof TrackScalarFieldEnum]


  export const StudioItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    type: 'type',
    price: 'price',
    bonusMultiplier: 'bonusMultiplier',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt'
  };

  export type StudioItemScalarFieldEnum = (typeof StudioItemScalarFieldEnum)[keyof typeof StudioItemScalarFieldEnum]


  export const UserStudioItemScalarFieldEnum: {
    id: 'id',
    purchasedAt: 'purchasedAt',
    userId: 'userId',
    studioItemId: 'studioItemId'
  };

  export type UserStudioItemScalarFieldEnum = (typeof UserStudioItemScalarFieldEnum)[keyof typeof UserStudioItemScalarFieldEnum]


  export const GameEventScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    requiredGenres: 'requiredGenres',
    requiredMoods: 'requiredMoods',
    rewardAmount: 'rewardAmount',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type GameEventScalarFieldEnum = (typeof GameEventScalarFieldEnum)[keyof typeof GameEventScalarFieldEnum]


  export const EventParticipationScalarFieldEnum: {
    id: 'id',
    joinedAt: 'joinedAt',
    score: 'score',
    userId: 'userId',
    eventId: 'eventId',
    trackId: 'trackId'
  };

  export type EventParticipationScalarFieldEnum = (typeof EventParticipationScalarFieldEnum)[keyof typeof EventParticipationScalarFieldEnum]


  export const BoostScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    duration: 'duration',
    startTime: 'startTime',
    endTime: 'endTime',
    createdAt: 'createdAt',
    senderId: 'senderId',
    receiverId: 'receiverId',
    trackId: 'trackId'
  };

  export type BoostScalarFieldEnum = (typeof BoostScalarFieldEnum)[keyof typeof BoostScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    amount: 'amount',
    description: 'description',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const GameCycleScalarFieldEnum: {
    id: 'id',
    startDate: 'startDate',
    endDate: 'endDate',
    cycleNumber: 'cycleNumber',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type GameCycleScalarFieldEnum = (typeof GameCycleScalarFieldEnum)[keyof typeof GameCycleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    soundcloudId?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    infosargent?: FloatFilter<"User"> | number
    level?: IntFilter<"User"> | number
    experience?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    tracks?: TrackListRelationFilter
    studioItems?: UserStudioItemListRelationFilter
    sentBoosts?: BoostListRelationFilter
    receivedBoosts?: BoostListRelationFilter
    participations?: EventParticipationListRelationFilter
    transactions?: TransactionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    soundcloudId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    infosargent?: SortOrder
    level?: SortOrder
    experience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tracks?: TrackOrderByRelationAggregateInput
    studioItems?: UserStudioItemOrderByRelationAggregateInput
    sentBoosts?: BoostOrderByRelationAggregateInput
    receivedBoosts?: BoostOrderByRelationAggregateInput
    participations?: EventParticipationOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    soundcloudId?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    infosargent?: FloatFilter<"User"> | number
    level?: IntFilter<"User"> | number
    experience?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    tracks?: TrackListRelationFilter
    studioItems?: UserStudioItemListRelationFilter
    sentBoosts?: BoostListRelationFilter
    receivedBoosts?: BoostListRelationFilter
    participations?: EventParticipationListRelationFilter
    transactions?: TransactionListRelationFilter
  }, "id" | "soundcloudId" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    soundcloudId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    infosargent?: SortOrder
    level?: SortOrder
    experience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    soundcloudId?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    infosargent?: FloatWithAggregatesFilter<"User"> | number
    level?: IntWithAggregatesFilter<"User"> | number
    experience?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TrackWhereInput = {
    AND?: TrackWhereInput | TrackWhereInput[]
    OR?: TrackWhereInput[]
    NOT?: TrackWhereInput | TrackWhereInput[]
    id?: StringFilter<"Track"> | string
    soundcloudTrackId?: StringFilter<"Track"> | string
    title?: StringFilter<"Track"> | string
    artwork?: StringNullableFilter<"Track"> | string | null
    genre?: StringNullableListFilter<"Track">
    mood?: StringNullableListFilter<"Track">
    baseValue?: FloatFilter<"Track"> | number
    currentValue?: FloatFilter<"Track"> | number
    playCount?: IntFilter<"Track"> | number
    createdAt?: DateTimeFilter<"Track"> | Date | string
    updatedAt?: DateTimeFilter<"Track"> | Date | string
    userId?: StringFilter<"Track"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    boosts?: BoostListRelationFilter
    eventParticipations?: EventParticipationListRelationFilter
  }

  export type TrackOrderByWithRelationInput = {
    id?: SortOrder
    soundcloudTrackId?: SortOrder
    title?: SortOrder
    artwork?: SortOrderInput | SortOrder
    genre?: SortOrder
    mood?: SortOrder
    baseValue?: SortOrder
    currentValue?: SortOrder
    playCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    boosts?: BoostOrderByRelationAggregateInput
    eventParticipations?: EventParticipationOrderByRelationAggregateInput
  }

  export type TrackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    soundcloudTrackId?: string
    AND?: TrackWhereInput | TrackWhereInput[]
    OR?: TrackWhereInput[]
    NOT?: TrackWhereInput | TrackWhereInput[]
    title?: StringFilter<"Track"> | string
    artwork?: StringNullableFilter<"Track"> | string | null
    genre?: StringNullableListFilter<"Track">
    mood?: StringNullableListFilter<"Track">
    baseValue?: FloatFilter<"Track"> | number
    currentValue?: FloatFilter<"Track"> | number
    playCount?: IntFilter<"Track"> | number
    createdAt?: DateTimeFilter<"Track"> | Date | string
    updatedAt?: DateTimeFilter<"Track"> | Date | string
    userId?: StringFilter<"Track"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    boosts?: BoostListRelationFilter
    eventParticipations?: EventParticipationListRelationFilter
  }, "id" | "soundcloudTrackId">

  export type TrackOrderByWithAggregationInput = {
    id?: SortOrder
    soundcloudTrackId?: SortOrder
    title?: SortOrder
    artwork?: SortOrderInput | SortOrder
    genre?: SortOrder
    mood?: SortOrder
    baseValue?: SortOrder
    currentValue?: SortOrder
    playCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: TrackCountOrderByAggregateInput
    _avg?: TrackAvgOrderByAggregateInput
    _max?: TrackMaxOrderByAggregateInput
    _min?: TrackMinOrderByAggregateInput
    _sum?: TrackSumOrderByAggregateInput
  }

  export type TrackScalarWhereWithAggregatesInput = {
    AND?: TrackScalarWhereWithAggregatesInput | TrackScalarWhereWithAggregatesInput[]
    OR?: TrackScalarWhereWithAggregatesInput[]
    NOT?: TrackScalarWhereWithAggregatesInput | TrackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Track"> | string
    soundcloudTrackId?: StringWithAggregatesFilter<"Track"> | string
    title?: StringWithAggregatesFilter<"Track"> | string
    artwork?: StringNullableWithAggregatesFilter<"Track"> | string | null
    genre?: StringNullableListFilter<"Track">
    mood?: StringNullableListFilter<"Track">
    baseValue?: FloatWithAggregatesFilter<"Track"> | number
    currentValue?: FloatWithAggregatesFilter<"Track"> | number
    playCount?: IntWithAggregatesFilter<"Track"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Track"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Track"> | Date | string
    userId?: StringWithAggregatesFilter<"Track"> | string
  }

  export type StudioItemWhereInput = {
    AND?: StudioItemWhereInput | StudioItemWhereInput[]
    OR?: StudioItemWhereInput[]
    NOT?: StudioItemWhereInput | StudioItemWhereInput[]
    id?: StringFilter<"StudioItem"> | string
    name?: StringFilter<"StudioItem"> | string
    description?: StringFilter<"StudioItem"> | string
    type?: StringFilter<"StudioItem"> | string
    price?: FloatFilter<"StudioItem"> | number
    bonusMultiplier?: FloatFilter<"StudioItem"> | number
    imageUrl?: StringNullableFilter<"StudioItem"> | string | null
    createdAt?: DateTimeFilter<"StudioItem"> | Date | string
    userItems?: UserStudioItemListRelationFilter
  }

  export type StudioItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    price?: SortOrder
    bonusMultiplier?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userItems?: UserStudioItemOrderByRelationAggregateInput
  }

  export type StudioItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StudioItemWhereInput | StudioItemWhereInput[]
    OR?: StudioItemWhereInput[]
    NOT?: StudioItemWhereInput | StudioItemWhereInput[]
    name?: StringFilter<"StudioItem"> | string
    description?: StringFilter<"StudioItem"> | string
    type?: StringFilter<"StudioItem"> | string
    price?: FloatFilter<"StudioItem"> | number
    bonusMultiplier?: FloatFilter<"StudioItem"> | number
    imageUrl?: StringNullableFilter<"StudioItem"> | string | null
    createdAt?: DateTimeFilter<"StudioItem"> | Date | string
    userItems?: UserStudioItemListRelationFilter
  }, "id">

  export type StudioItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    price?: SortOrder
    bonusMultiplier?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StudioItemCountOrderByAggregateInput
    _avg?: StudioItemAvgOrderByAggregateInput
    _max?: StudioItemMaxOrderByAggregateInput
    _min?: StudioItemMinOrderByAggregateInput
    _sum?: StudioItemSumOrderByAggregateInput
  }

  export type StudioItemScalarWhereWithAggregatesInput = {
    AND?: StudioItemScalarWhereWithAggregatesInput | StudioItemScalarWhereWithAggregatesInput[]
    OR?: StudioItemScalarWhereWithAggregatesInput[]
    NOT?: StudioItemScalarWhereWithAggregatesInput | StudioItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudioItem"> | string
    name?: StringWithAggregatesFilter<"StudioItem"> | string
    description?: StringWithAggregatesFilter<"StudioItem"> | string
    type?: StringWithAggregatesFilter<"StudioItem"> | string
    price?: FloatWithAggregatesFilter<"StudioItem"> | number
    bonusMultiplier?: FloatWithAggregatesFilter<"StudioItem"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"StudioItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StudioItem"> | Date | string
  }

  export type UserStudioItemWhereInput = {
    AND?: UserStudioItemWhereInput | UserStudioItemWhereInput[]
    OR?: UserStudioItemWhereInput[]
    NOT?: UserStudioItemWhereInput | UserStudioItemWhereInput[]
    id?: StringFilter<"UserStudioItem"> | string
    purchasedAt?: DateTimeFilter<"UserStudioItem"> | Date | string
    userId?: StringFilter<"UserStudioItem"> | string
    studioItemId?: StringFilter<"UserStudioItem"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    studioItem?: XOR<StudioItemRelationFilter, StudioItemWhereInput>
  }

  export type UserStudioItemOrderByWithRelationInput = {
    id?: SortOrder
    purchasedAt?: SortOrder
    userId?: SortOrder
    studioItemId?: SortOrder
    user?: UserOrderByWithRelationInput
    studioItem?: StudioItemOrderByWithRelationInput
  }

  export type UserStudioItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_studioItemId?: UserStudioItemUserIdStudioItemIdCompoundUniqueInput
    AND?: UserStudioItemWhereInput | UserStudioItemWhereInput[]
    OR?: UserStudioItemWhereInput[]
    NOT?: UserStudioItemWhereInput | UserStudioItemWhereInput[]
    purchasedAt?: DateTimeFilter<"UserStudioItem"> | Date | string
    userId?: StringFilter<"UserStudioItem"> | string
    studioItemId?: StringFilter<"UserStudioItem"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    studioItem?: XOR<StudioItemRelationFilter, StudioItemWhereInput>
  }, "id" | "userId_studioItemId">

  export type UserStudioItemOrderByWithAggregationInput = {
    id?: SortOrder
    purchasedAt?: SortOrder
    userId?: SortOrder
    studioItemId?: SortOrder
    _count?: UserStudioItemCountOrderByAggregateInput
    _max?: UserStudioItemMaxOrderByAggregateInput
    _min?: UserStudioItemMinOrderByAggregateInput
  }

  export type UserStudioItemScalarWhereWithAggregatesInput = {
    AND?: UserStudioItemScalarWhereWithAggregatesInput | UserStudioItemScalarWhereWithAggregatesInput[]
    OR?: UserStudioItemScalarWhereWithAggregatesInput[]
    NOT?: UserStudioItemScalarWhereWithAggregatesInput | UserStudioItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserStudioItem"> | string
    purchasedAt?: DateTimeWithAggregatesFilter<"UserStudioItem"> | Date | string
    userId?: StringWithAggregatesFilter<"UserStudioItem"> | string
    studioItemId?: StringWithAggregatesFilter<"UserStudioItem"> | string
  }

  export type GameEventWhereInput = {
    AND?: GameEventWhereInput | GameEventWhereInput[]
    OR?: GameEventWhereInput[]
    NOT?: GameEventWhereInput | GameEventWhereInput[]
    id?: StringFilter<"GameEvent"> | string
    name?: StringFilter<"GameEvent"> | string
    description?: StringFilter<"GameEvent"> | string
    startDate?: DateTimeFilter<"GameEvent"> | Date | string
    endDate?: DateTimeFilter<"GameEvent"> | Date | string
    requiredGenres?: StringNullableListFilter<"GameEvent">
    requiredMoods?: StringNullableListFilter<"GameEvent">
    rewardAmount?: FloatFilter<"GameEvent"> | number
    status?: StringFilter<"GameEvent"> | string
    createdAt?: DateTimeFilter<"GameEvent"> | Date | string
    participations?: EventParticipationListRelationFilter
  }

  export type GameEventOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    requiredGenres?: SortOrder
    requiredMoods?: SortOrder
    rewardAmount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    participations?: EventParticipationOrderByRelationAggregateInput
  }

  export type GameEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameEventWhereInput | GameEventWhereInput[]
    OR?: GameEventWhereInput[]
    NOT?: GameEventWhereInput | GameEventWhereInput[]
    name?: StringFilter<"GameEvent"> | string
    description?: StringFilter<"GameEvent"> | string
    startDate?: DateTimeFilter<"GameEvent"> | Date | string
    endDate?: DateTimeFilter<"GameEvent"> | Date | string
    requiredGenres?: StringNullableListFilter<"GameEvent">
    requiredMoods?: StringNullableListFilter<"GameEvent">
    rewardAmount?: FloatFilter<"GameEvent"> | number
    status?: StringFilter<"GameEvent"> | string
    createdAt?: DateTimeFilter<"GameEvent"> | Date | string
    participations?: EventParticipationListRelationFilter
  }, "id">

  export type GameEventOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    requiredGenres?: SortOrder
    requiredMoods?: SortOrder
    rewardAmount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: GameEventCountOrderByAggregateInput
    _avg?: GameEventAvgOrderByAggregateInput
    _max?: GameEventMaxOrderByAggregateInput
    _min?: GameEventMinOrderByAggregateInput
    _sum?: GameEventSumOrderByAggregateInput
  }

  export type GameEventScalarWhereWithAggregatesInput = {
    AND?: GameEventScalarWhereWithAggregatesInput | GameEventScalarWhereWithAggregatesInput[]
    OR?: GameEventScalarWhereWithAggregatesInput[]
    NOT?: GameEventScalarWhereWithAggregatesInput | GameEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameEvent"> | string
    name?: StringWithAggregatesFilter<"GameEvent"> | string
    description?: StringWithAggregatesFilter<"GameEvent"> | string
    startDate?: DateTimeWithAggregatesFilter<"GameEvent"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"GameEvent"> | Date | string
    requiredGenres?: StringNullableListFilter<"GameEvent">
    requiredMoods?: StringNullableListFilter<"GameEvent">
    rewardAmount?: FloatWithAggregatesFilter<"GameEvent"> | number
    status?: StringWithAggregatesFilter<"GameEvent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GameEvent"> | Date | string
  }

  export type EventParticipationWhereInput = {
    AND?: EventParticipationWhereInput | EventParticipationWhereInput[]
    OR?: EventParticipationWhereInput[]
    NOT?: EventParticipationWhereInput | EventParticipationWhereInput[]
    id?: StringFilter<"EventParticipation"> | string
    joinedAt?: DateTimeFilter<"EventParticipation"> | Date | string
    score?: FloatFilter<"EventParticipation"> | number
    userId?: StringFilter<"EventParticipation"> | string
    eventId?: StringFilter<"EventParticipation"> | string
    trackId?: StringFilter<"EventParticipation"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    event?: XOR<GameEventRelationFilter, GameEventWhereInput>
    track?: XOR<TrackRelationFilter, TrackWhereInput>
  }

  export type EventParticipationOrderByWithRelationInput = {
    id?: SortOrder
    joinedAt?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    trackId?: SortOrder
    user?: UserOrderByWithRelationInput
    event?: GameEventOrderByWithRelationInput
    track?: TrackOrderByWithRelationInput
  }

  export type EventParticipationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_eventId_trackId?: EventParticipationUserIdEventIdTrackIdCompoundUniqueInput
    AND?: EventParticipationWhereInput | EventParticipationWhereInput[]
    OR?: EventParticipationWhereInput[]
    NOT?: EventParticipationWhereInput | EventParticipationWhereInput[]
    joinedAt?: DateTimeFilter<"EventParticipation"> | Date | string
    score?: FloatFilter<"EventParticipation"> | number
    userId?: StringFilter<"EventParticipation"> | string
    eventId?: StringFilter<"EventParticipation"> | string
    trackId?: StringFilter<"EventParticipation"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    event?: XOR<GameEventRelationFilter, GameEventWhereInput>
    track?: XOR<TrackRelationFilter, TrackWhereInput>
  }, "id" | "userId_eventId_trackId">

  export type EventParticipationOrderByWithAggregationInput = {
    id?: SortOrder
    joinedAt?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    trackId?: SortOrder
    _count?: EventParticipationCountOrderByAggregateInput
    _avg?: EventParticipationAvgOrderByAggregateInput
    _max?: EventParticipationMaxOrderByAggregateInput
    _min?: EventParticipationMinOrderByAggregateInput
    _sum?: EventParticipationSumOrderByAggregateInput
  }

  export type EventParticipationScalarWhereWithAggregatesInput = {
    AND?: EventParticipationScalarWhereWithAggregatesInput | EventParticipationScalarWhereWithAggregatesInput[]
    OR?: EventParticipationScalarWhereWithAggregatesInput[]
    NOT?: EventParticipationScalarWhereWithAggregatesInput | EventParticipationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventParticipation"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"EventParticipation"> | Date | string
    score?: FloatWithAggregatesFilter<"EventParticipation"> | number
    userId?: StringWithAggregatesFilter<"EventParticipation"> | string
    eventId?: StringWithAggregatesFilter<"EventParticipation"> | string
    trackId?: StringWithAggregatesFilter<"EventParticipation"> | string
  }

  export type BoostWhereInput = {
    AND?: BoostWhereInput | BoostWhereInput[]
    OR?: BoostWhereInput[]
    NOT?: BoostWhereInput | BoostWhereInput[]
    id?: StringFilter<"Boost"> | string
    amount?: FloatFilter<"Boost"> | number
    duration?: IntFilter<"Boost"> | number
    startTime?: DateTimeFilter<"Boost"> | Date | string
    endTime?: DateTimeFilter<"Boost"> | Date | string
    createdAt?: DateTimeFilter<"Boost"> | Date | string
    senderId?: StringFilter<"Boost"> | string
    receiverId?: StringFilter<"Boost"> | string
    trackId?: StringFilter<"Boost"> | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    track?: XOR<TrackRelationFilter, TrackWhereInput>
  }

  export type BoostOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    duration?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    trackId?: SortOrder
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
    track?: TrackOrderByWithRelationInput
  }

  export type BoostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BoostWhereInput | BoostWhereInput[]
    OR?: BoostWhereInput[]
    NOT?: BoostWhereInput | BoostWhereInput[]
    amount?: FloatFilter<"Boost"> | number
    duration?: IntFilter<"Boost"> | number
    startTime?: DateTimeFilter<"Boost"> | Date | string
    endTime?: DateTimeFilter<"Boost"> | Date | string
    createdAt?: DateTimeFilter<"Boost"> | Date | string
    senderId?: StringFilter<"Boost"> | string
    receiverId?: StringFilter<"Boost"> | string
    trackId?: StringFilter<"Boost"> | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
    track?: XOR<TrackRelationFilter, TrackWhereInput>
  }, "id">

  export type BoostOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    duration?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    trackId?: SortOrder
    _count?: BoostCountOrderByAggregateInput
    _avg?: BoostAvgOrderByAggregateInput
    _max?: BoostMaxOrderByAggregateInput
    _min?: BoostMinOrderByAggregateInput
    _sum?: BoostSumOrderByAggregateInput
  }

  export type BoostScalarWhereWithAggregatesInput = {
    AND?: BoostScalarWhereWithAggregatesInput | BoostScalarWhereWithAggregatesInput[]
    OR?: BoostScalarWhereWithAggregatesInput[]
    NOT?: BoostScalarWhereWithAggregatesInput | BoostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Boost"> | string
    amount?: FloatWithAggregatesFilter<"Boost"> | number
    duration?: IntWithAggregatesFilter<"Boost"> | number
    startTime?: DateTimeWithAggregatesFilter<"Boost"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Boost"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Boost"> | Date | string
    senderId?: StringWithAggregatesFilter<"Boost"> | string
    receiverId?: StringWithAggregatesFilter<"Boost"> | string
    trackId?: StringWithAggregatesFilter<"Boost"> | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    type?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    description?: StringFilter<"Transaction"> | string
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    userId?: StringFilter<"Transaction"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    type?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    description?: StringFilter<"Transaction"> | string
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    userId?: StringFilter<"Transaction"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    type?: StringWithAggregatesFilter<"Transaction"> | string
    amount?: FloatWithAggregatesFilter<"Transaction"> | number
    description?: StringWithAggregatesFilter<"Transaction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    userId?: StringWithAggregatesFilter<"Transaction"> | string
  }

  export type GameCycleWhereInput = {
    AND?: GameCycleWhereInput | GameCycleWhereInput[]
    OR?: GameCycleWhereInput[]
    NOT?: GameCycleWhereInput | GameCycleWhereInput[]
    id?: StringFilter<"GameCycle"> | string
    startDate?: DateTimeFilter<"GameCycle"> | Date | string
    endDate?: DateTimeFilter<"GameCycle"> | Date | string
    cycleNumber?: IntFilter<"GameCycle"> | number
    status?: StringFilter<"GameCycle"> | string
    createdAt?: DateTimeFilter<"GameCycle"> | Date | string
  }

  export type GameCycleOrderByWithRelationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    cycleNumber?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GameCycleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameCycleWhereInput | GameCycleWhereInput[]
    OR?: GameCycleWhereInput[]
    NOT?: GameCycleWhereInput | GameCycleWhereInput[]
    startDate?: DateTimeFilter<"GameCycle"> | Date | string
    endDate?: DateTimeFilter<"GameCycle"> | Date | string
    cycleNumber?: IntFilter<"GameCycle"> | number
    status?: StringFilter<"GameCycle"> | string
    createdAt?: DateTimeFilter<"GameCycle"> | Date | string
  }, "id">

  export type GameCycleOrderByWithAggregationInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    cycleNumber?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: GameCycleCountOrderByAggregateInput
    _avg?: GameCycleAvgOrderByAggregateInput
    _max?: GameCycleMaxOrderByAggregateInput
    _min?: GameCycleMinOrderByAggregateInput
    _sum?: GameCycleSumOrderByAggregateInput
  }

  export type GameCycleScalarWhereWithAggregatesInput = {
    AND?: GameCycleScalarWhereWithAggregatesInput | GameCycleScalarWhereWithAggregatesInput[]
    OR?: GameCycleScalarWhereWithAggregatesInput[]
    NOT?: GameCycleScalarWhereWithAggregatesInput | GameCycleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameCycle"> | string
    startDate?: DateTimeWithAggregatesFilter<"GameCycle"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"GameCycle"> | Date | string
    cycleNumber?: IntWithAggregatesFilter<"GameCycle"> | number
    status?: StringWithAggregatesFilter<"GameCycle"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GameCycle"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackCreateNestedManyWithoutUserInput
    studioItems?: UserStudioItemCreateNestedManyWithoutUserInput
    sentBoosts?: BoostCreateNestedManyWithoutSenderInput
    receivedBoosts?: BoostCreateNestedManyWithoutReceiverInput
    participations?: EventParticipationCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutUserInput
    studioItems?: UserStudioItemUncheckedCreateNestedManyWithoutUserInput
    sentBoosts?: BoostUncheckedCreateNestedManyWithoutSenderInput
    receivedBoosts?: BoostUncheckedCreateNestedManyWithoutReceiverInput
    participations?: EventParticipationUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUpdateManyWithoutUserNestedInput
    studioItems?: UserStudioItemUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUpdateManyWithoutSenderNestedInput
    receivedBoosts?: BoostUpdateManyWithoutReceiverNestedInput
    participations?: EventParticipationUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutUserNestedInput
    studioItems?: UserStudioItemUncheckedUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUncheckedUpdateManyWithoutSenderNestedInput
    receivedBoosts?: BoostUncheckedUpdateManyWithoutReceiverNestedInput
    participations?: EventParticipationUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackCreateInput = {
    id?: string
    soundcloudTrackId: string
    title: string
    artwork?: string | null
    genre?: TrackCreategenreInput | string[]
    mood?: TrackCreatemoodInput | string[]
    baseValue?: number
    currentValue?: number
    playCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTracksInput
    boosts?: BoostCreateNestedManyWithoutTrackInput
    eventParticipations?: EventParticipationCreateNestedManyWithoutTrackInput
  }

  export type TrackUncheckedCreateInput = {
    id?: string
    soundcloudTrackId: string
    title: string
    artwork?: string | null
    genre?: TrackCreategenreInput | string[]
    mood?: TrackCreatemoodInput | string[]
    baseValue?: number
    currentValue?: number
    playCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    boosts?: BoostUncheckedCreateNestedManyWithoutTrackInput
    eventParticipations?: EventParticipationUncheckedCreateNestedManyWithoutTrackInput
  }

  export type TrackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTracksNestedInput
    boosts?: BoostUpdateManyWithoutTrackNestedInput
    eventParticipations?: EventParticipationUpdateManyWithoutTrackNestedInput
  }

  export type TrackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    boosts?: BoostUncheckedUpdateManyWithoutTrackNestedInput
    eventParticipations?: EventParticipationUncheckedUpdateManyWithoutTrackNestedInput
  }

  export type TrackCreateManyInput = {
    id?: string
    soundcloudTrackId: string
    title: string
    artwork?: string | null
    genre?: TrackCreategenreInput | string[]
    mood?: TrackCreatemoodInput | string[]
    baseValue?: number
    currentValue?: number
    playCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type TrackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StudioItemCreateInput = {
    id?: string
    name: string
    description: string
    type: string
    price: number
    bonusMultiplier: number
    imageUrl?: string | null
    createdAt?: Date | string
    userItems?: UserStudioItemCreateNestedManyWithoutStudioItemInput
  }

  export type StudioItemUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    type: string
    price: number
    bonusMultiplier: number
    imageUrl?: string | null
    createdAt?: Date | string
    userItems?: UserStudioItemUncheckedCreateNestedManyWithoutStudioItemInput
  }

  export type StudioItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    bonusMultiplier?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userItems?: UserStudioItemUpdateManyWithoutStudioItemNestedInput
  }

  export type StudioItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    bonusMultiplier?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userItems?: UserStudioItemUncheckedUpdateManyWithoutStudioItemNestedInput
  }

  export type StudioItemCreateManyInput = {
    id?: string
    name: string
    description: string
    type: string
    price: number
    bonusMultiplier: number
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type StudioItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    bonusMultiplier?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudioItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    bonusMultiplier?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStudioItemCreateInput = {
    id?: string
    purchasedAt?: Date | string
    user: UserCreateNestedOneWithoutStudioItemsInput
    studioItem: StudioItemCreateNestedOneWithoutUserItemsInput
  }

  export type UserStudioItemUncheckedCreateInput = {
    id?: string
    purchasedAt?: Date | string
    userId: string
    studioItemId: string
  }

  export type UserStudioItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudioItemsNestedInput
    studioItem?: StudioItemUpdateOneRequiredWithoutUserItemsNestedInput
  }

  export type UserStudioItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    studioItemId?: StringFieldUpdateOperationsInput | string
  }

  export type UserStudioItemCreateManyInput = {
    id?: string
    purchasedAt?: Date | string
    userId: string
    studioItemId: string
  }

  export type UserStudioItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStudioItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    studioItemId?: StringFieldUpdateOperationsInput | string
  }

  export type GameEventCreateInput = {
    id?: string
    name: string
    description: string
    startDate: Date | string
    endDate: Date | string
    requiredGenres?: GameEventCreaterequiredGenresInput | string[]
    requiredMoods?: GameEventCreaterequiredMoodsInput | string[]
    rewardAmount: number
    status: string
    createdAt?: Date | string
    participations?: EventParticipationCreateNestedManyWithoutEventInput
  }

  export type GameEventUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    startDate: Date | string
    endDate: Date | string
    requiredGenres?: GameEventCreaterequiredGenresInput | string[]
    requiredMoods?: GameEventCreaterequiredMoodsInput | string[]
    rewardAmount: number
    status: string
    createdAt?: Date | string
    participations?: EventParticipationUncheckedCreateNestedManyWithoutEventInput
  }

  export type GameEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredGenres?: GameEventUpdaterequiredGenresInput | string[]
    requiredMoods?: GameEventUpdaterequiredMoodsInput | string[]
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: EventParticipationUpdateManyWithoutEventNestedInput
  }

  export type GameEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredGenres?: GameEventUpdaterequiredGenresInput | string[]
    requiredMoods?: GameEventUpdaterequiredMoodsInput | string[]
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: EventParticipationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type GameEventCreateManyInput = {
    id?: string
    name: string
    description: string
    startDate: Date | string
    endDate: Date | string
    requiredGenres?: GameEventCreaterequiredGenresInput | string[]
    requiredMoods?: GameEventCreaterequiredMoodsInput | string[]
    rewardAmount: number
    status: string
    createdAt?: Date | string
  }

  export type GameEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredGenres?: GameEventUpdaterequiredGenresInput | string[]
    requiredMoods?: GameEventUpdaterequiredMoodsInput | string[]
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredGenres?: GameEventUpdaterequiredGenresInput | string[]
    requiredMoods?: GameEventUpdaterequiredMoodsInput | string[]
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventParticipationCreateInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    user: UserCreateNestedOneWithoutParticipationsInput
    event: GameEventCreateNestedOneWithoutParticipationsInput
    track: TrackCreateNestedOneWithoutEventParticipationsInput
  }

  export type EventParticipationUncheckedCreateInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    userId: string
    eventId: string
    trackId: string
  }

  export type EventParticipationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutParticipationsNestedInput
    event?: GameEventUpdateOneRequiredWithoutParticipationsNestedInput
    track?: TrackUpdateOneRequiredWithoutEventParticipationsNestedInput
  }

  export type EventParticipationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type EventParticipationCreateManyInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    userId: string
    eventId: string
    trackId: string
  }

  export type EventParticipationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
  }

  export type EventParticipationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type BoostCreateInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutSentBoostsInput
    receiver: UserCreateNestedOneWithoutReceivedBoostsInput
    track: TrackCreateNestedOneWithoutBoostsInput
  }

  export type BoostUncheckedCreateInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    senderId: string
    receiverId: string
    trackId: string
  }

  export type BoostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentBoostsNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedBoostsNestedInput
    track?: TrackUpdateOneRequiredWithoutBoostsNestedInput
  }

  export type BoostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type BoostCreateManyInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    senderId: string
    receiverId: string
    trackId: string
  }

  export type BoostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateInput = {
    id?: string
    type: string
    amount: number
    description: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    type: string
    amount: number
    description: string
    createdAt?: Date | string
    userId: string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    type: string
    amount: number
    description: string
    createdAt?: Date | string
    userId: string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type GameCycleCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    cycleNumber: number
    status: string
    createdAt?: Date | string
  }

  export type GameCycleUncheckedCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    cycleNumber: number
    status: string
    createdAt?: Date | string
  }

  export type GameCycleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleNumber?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCycleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleNumber?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCycleCreateManyInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    cycleNumber: number
    status: string
    createdAt?: Date | string
  }

  export type GameCycleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleNumber?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCycleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleNumber?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TrackListRelationFilter = {
    every?: TrackWhereInput
    some?: TrackWhereInput
    none?: TrackWhereInput
  }

  export type UserStudioItemListRelationFilter = {
    every?: UserStudioItemWhereInput
    some?: UserStudioItemWhereInput
    none?: UserStudioItemWhereInput
  }

  export type BoostListRelationFilter = {
    every?: BoostWhereInput
    some?: BoostWhereInput
    none?: BoostWhereInput
  }

  export type EventParticipationListRelationFilter = {
    every?: EventParticipationWhereInput
    some?: EventParticipationWhereInput
    none?: EventParticipationWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type TrackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserStudioItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventParticipationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    soundcloudId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    infosargent?: SortOrder
    level?: SortOrder
    experience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    infosargent?: SortOrder
    level?: SortOrder
    experience?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    soundcloudId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    infosargent?: SortOrder
    level?: SortOrder
    experience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    soundcloudId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    infosargent?: SortOrder
    level?: SortOrder
    experience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    infosargent?: SortOrder
    level?: SortOrder
    experience?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TrackCountOrderByAggregateInput = {
    id?: SortOrder
    soundcloudTrackId?: SortOrder
    title?: SortOrder
    artwork?: SortOrder
    genre?: SortOrder
    mood?: SortOrder
    baseValue?: SortOrder
    currentValue?: SortOrder
    playCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type TrackAvgOrderByAggregateInput = {
    baseValue?: SortOrder
    currentValue?: SortOrder
    playCount?: SortOrder
  }

  export type TrackMaxOrderByAggregateInput = {
    id?: SortOrder
    soundcloudTrackId?: SortOrder
    title?: SortOrder
    artwork?: SortOrder
    baseValue?: SortOrder
    currentValue?: SortOrder
    playCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type TrackMinOrderByAggregateInput = {
    id?: SortOrder
    soundcloudTrackId?: SortOrder
    title?: SortOrder
    artwork?: SortOrder
    baseValue?: SortOrder
    currentValue?: SortOrder
    playCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type TrackSumOrderByAggregateInput = {
    baseValue?: SortOrder
    currentValue?: SortOrder
    playCount?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StudioItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    price?: SortOrder
    bonusMultiplier?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type StudioItemAvgOrderByAggregateInput = {
    price?: SortOrder
    bonusMultiplier?: SortOrder
  }

  export type StudioItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    price?: SortOrder
    bonusMultiplier?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type StudioItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    price?: SortOrder
    bonusMultiplier?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type StudioItemSumOrderByAggregateInput = {
    price?: SortOrder
    bonusMultiplier?: SortOrder
  }

  export type StudioItemRelationFilter = {
    is?: StudioItemWhereInput
    isNot?: StudioItemWhereInput
  }

  export type UserStudioItemUserIdStudioItemIdCompoundUniqueInput = {
    userId: string
    studioItemId: string
  }

  export type UserStudioItemCountOrderByAggregateInput = {
    id?: SortOrder
    purchasedAt?: SortOrder
    userId?: SortOrder
    studioItemId?: SortOrder
  }

  export type UserStudioItemMaxOrderByAggregateInput = {
    id?: SortOrder
    purchasedAt?: SortOrder
    userId?: SortOrder
    studioItemId?: SortOrder
  }

  export type UserStudioItemMinOrderByAggregateInput = {
    id?: SortOrder
    purchasedAt?: SortOrder
    userId?: SortOrder
    studioItemId?: SortOrder
  }

  export type GameEventCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    requiredGenres?: SortOrder
    requiredMoods?: SortOrder
    rewardAmount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GameEventAvgOrderByAggregateInput = {
    rewardAmount?: SortOrder
  }

  export type GameEventMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    rewardAmount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GameEventMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    rewardAmount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GameEventSumOrderByAggregateInput = {
    rewardAmount?: SortOrder
  }

  export type GameEventRelationFilter = {
    is?: GameEventWhereInput
    isNot?: GameEventWhereInput
  }

  export type TrackRelationFilter = {
    is?: TrackWhereInput
    isNot?: TrackWhereInput
  }

  export type EventParticipationUserIdEventIdTrackIdCompoundUniqueInput = {
    userId: string
    eventId: string
    trackId: string
  }

  export type EventParticipationCountOrderByAggregateInput = {
    id?: SortOrder
    joinedAt?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    trackId?: SortOrder
  }

  export type EventParticipationAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type EventParticipationMaxOrderByAggregateInput = {
    id?: SortOrder
    joinedAt?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    trackId?: SortOrder
  }

  export type EventParticipationMinOrderByAggregateInput = {
    id?: SortOrder
    joinedAt?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    trackId?: SortOrder
  }

  export type EventParticipationSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type BoostCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    duration?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    trackId?: SortOrder
  }

  export type BoostAvgOrderByAggregateInput = {
    amount?: SortOrder
    duration?: SortOrder
  }

  export type BoostMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    duration?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    trackId?: SortOrder
  }

  export type BoostMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    duration?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    trackId?: SortOrder
  }

  export type BoostSumOrderByAggregateInput = {
    amount?: SortOrder
    duration?: SortOrder
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type GameCycleCountOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    cycleNumber?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GameCycleAvgOrderByAggregateInput = {
    cycleNumber?: SortOrder
  }

  export type GameCycleMaxOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    cycleNumber?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GameCycleMinOrderByAggregateInput = {
    id?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    cycleNumber?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type GameCycleSumOrderByAggregateInput = {
    cycleNumber?: SortOrder
  }

  export type TrackCreateNestedManyWithoutUserInput = {
    create?: XOR<TrackCreateWithoutUserInput, TrackUncheckedCreateWithoutUserInput> | TrackCreateWithoutUserInput[] | TrackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutUserInput | TrackCreateOrConnectWithoutUserInput[]
    createMany?: TrackCreateManyUserInputEnvelope
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
  }

  export type UserStudioItemCreateNestedManyWithoutUserInput = {
    create?: XOR<UserStudioItemCreateWithoutUserInput, UserStudioItemUncheckedCreateWithoutUserInput> | UserStudioItemCreateWithoutUserInput[] | UserStudioItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStudioItemCreateOrConnectWithoutUserInput | UserStudioItemCreateOrConnectWithoutUserInput[]
    createMany?: UserStudioItemCreateManyUserInputEnvelope
    connect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
  }

  export type BoostCreateNestedManyWithoutSenderInput = {
    create?: XOR<BoostCreateWithoutSenderInput, BoostUncheckedCreateWithoutSenderInput> | BoostCreateWithoutSenderInput[] | BoostUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutSenderInput | BoostCreateOrConnectWithoutSenderInput[]
    createMany?: BoostCreateManySenderInputEnvelope
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
  }

  export type BoostCreateNestedManyWithoutReceiverInput = {
    create?: XOR<BoostCreateWithoutReceiverInput, BoostUncheckedCreateWithoutReceiverInput> | BoostCreateWithoutReceiverInput[] | BoostUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutReceiverInput | BoostCreateOrConnectWithoutReceiverInput[]
    createMany?: BoostCreateManyReceiverInputEnvelope
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
  }

  export type EventParticipationCreateNestedManyWithoutUserInput = {
    create?: XOR<EventParticipationCreateWithoutUserInput, EventParticipationUncheckedCreateWithoutUserInput> | EventParticipationCreateWithoutUserInput[] | EventParticipationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutUserInput | EventParticipationCreateOrConnectWithoutUserInput[]
    createMany?: EventParticipationCreateManyUserInputEnvelope
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TrackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TrackCreateWithoutUserInput, TrackUncheckedCreateWithoutUserInput> | TrackCreateWithoutUserInput[] | TrackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutUserInput | TrackCreateOrConnectWithoutUserInput[]
    createMany?: TrackCreateManyUserInputEnvelope
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
  }

  export type UserStudioItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserStudioItemCreateWithoutUserInput, UserStudioItemUncheckedCreateWithoutUserInput> | UserStudioItemCreateWithoutUserInput[] | UserStudioItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStudioItemCreateOrConnectWithoutUserInput | UserStudioItemCreateOrConnectWithoutUserInput[]
    createMany?: UserStudioItemCreateManyUserInputEnvelope
    connect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
  }

  export type BoostUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<BoostCreateWithoutSenderInput, BoostUncheckedCreateWithoutSenderInput> | BoostCreateWithoutSenderInput[] | BoostUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutSenderInput | BoostCreateOrConnectWithoutSenderInput[]
    createMany?: BoostCreateManySenderInputEnvelope
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
  }

  export type BoostUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<BoostCreateWithoutReceiverInput, BoostUncheckedCreateWithoutReceiverInput> | BoostCreateWithoutReceiverInput[] | BoostUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutReceiverInput | BoostCreateOrConnectWithoutReceiverInput[]
    createMany?: BoostCreateManyReceiverInputEnvelope
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
  }

  export type EventParticipationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventParticipationCreateWithoutUserInput, EventParticipationUncheckedCreateWithoutUserInput> | EventParticipationCreateWithoutUserInput[] | EventParticipationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutUserInput | EventParticipationCreateOrConnectWithoutUserInput[]
    createMany?: EventParticipationCreateManyUserInputEnvelope
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TrackUpdateManyWithoutUserNestedInput = {
    create?: XOR<TrackCreateWithoutUserInput, TrackUncheckedCreateWithoutUserInput> | TrackCreateWithoutUserInput[] | TrackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutUserInput | TrackCreateOrConnectWithoutUserInput[]
    upsert?: TrackUpsertWithWhereUniqueWithoutUserInput | TrackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TrackCreateManyUserInputEnvelope
    set?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    disconnect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    delete?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    update?: TrackUpdateWithWhereUniqueWithoutUserInput | TrackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TrackUpdateManyWithWhereWithoutUserInput | TrackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TrackScalarWhereInput | TrackScalarWhereInput[]
  }

  export type UserStudioItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserStudioItemCreateWithoutUserInput, UserStudioItemUncheckedCreateWithoutUserInput> | UserStudioItemCreateWithoutUserInput[] | UserStudioItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStudioItemCreateOrConnectWithoutUserInput | UserStudioItemCreateOrConnectWithoutUserInput[]
    upsert?: UserStudioItemUpsertWithWhereUniqueWithoutUserInput | UserStudioItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserStudioItemCreateManyUserInputEnvelope
    set?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    disconnect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    delete?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    connect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    update?: UserStudioItemUpdateWithWhereUniqueWithoutUserInput | UserStudioItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserStudioItemUpdateManyWithWhereWithoutUserInput | UserStudioItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserStudioItemScalarWhereInput | UserStudioItemScalarWhereInput[]
  }

  export type BoostUpdateManyWithoutSenderNestedInput = {
    create?: XOR<BoostCreateWithoutSenderInput, BoostUncheckedCreateWithoutSenderInput> | BoostCreateWithoutSenderInput[] | BoostUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutSenderInput | BoostCreateOrConnectWithoutSenderInput[]
    upsert?: BoostUpsertWithWhereUniqueWithoutSenderInput | BoostUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: BoostCreateManySenderInputEnvelope
    set?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    disconnect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    delete?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    update?: BoostUpdateWithWhereUniqueWithoutSenderInput | BoostUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: BoostUpdateManyWithWhereWithoutSenderInput | BoostUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: BoostScalarWhereInput | BoostScalarWhereInput[]
  }

  export type BoostUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<BoostCreateWithoutReceiverInput, BoostUncheckedCreateWithoutReceiverInput> | BoostCreateWithoutReceiverInput[] | BoostUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutReceiverInput | BoostCreateOrConnectWithoutReceiverInput[]
    upsert?: BoostUpsertWithWhereUniqueWithoutReceiverInput | BoostUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: BoostCreateManyReceiverInputEnvelope
    set?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    disconnect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    delete?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    update?: BoostUpdateWithWhereUniqueWithoutReceiverInput | BoostUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: BoostUpdateManyWithWhereWithoutReceiverInput | BoostUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: BoostScalarWhereInput | BoostScalarWhereInput[]
  }

  export type EventParticipationUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventParticipationCreateWithoutUserInput, EventParticipationUncheckedCreateWithoutUserInput> | EventParticipationCreateWithoutUserInput[] | EventParticipationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutUserInput | EventParticipationCreateOrConnectWithoutUserInput[]
    upsert?: EventParticipationUpsertWithWhereUniqueWithoutUserInput | EventParticipationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventParticipationCreateManyUserInputEnvelope
    set?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    disconnect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    delete?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    update?: EventParticipationUpdateWithWhereUniqueWithoutUserInput | EventParticipationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventParticipationUpdateManyWithWhereWithoutUserInput | EventParticipationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventParticipationScalarWhereInput | EventParticipationScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TrackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TrackCreateWithoutUserInput, TrackUncheckedCreateWithoutUserInput> | TrackCreateWithoutUserInput[] | TrackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutUserInput | TrackCreateOrConnectWithoutUserInput[]
    upsert?: TrackUpsertWithWhereUniqueWithoutUserInput | TrackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TrackCreateManyUserInputEnvelope
    set?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    disconnect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    delete?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    update?: TrackUpdateWithWhereUniqueWithoutUserInput | TrackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TrackUpdateManyWithWhereWithoutUserInput | TrackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TrackScalarWhereInput | TrackScalarWhereInput[]
  }

  export type UserStudioItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserStudioItemCreateWithoutUserInput, UserStudioItemUncheckedCreateWithoutUserInput> | UserStudioItemCreateWithoutUserInput[] | UserStudioItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStudioItemCreateOrConnectWithoutUserInput | UserStudioItemCreateOrConnectWithoutUserInput[]
    upsert?: UserStudioItemUpsertWithWhereUniqueWithoutUserInput | UserStudioItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserStudioItemCreateManyUserInputEnvelope
    set?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    disconnect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    delete?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    connect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    update?: UserStudioItemUpdateWithWhereUniqueWithoutUserInput | UserStudioItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserStudioItemUpdateManyWithWhereWithoutUserInput | UserStudioItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserStudioItemScalarWhereInput | UserStudioItemScalarWhereInput[]
  }

  export type BoostUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<BoostCreateWithoutSenderInput, BoostUncheckedCreateWithoutSenderInput> | BoostCreateWithoutSenderInput[] | BoostUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutSenderInput | BoostCreateOrConnectWithoutSenderInput[]
    upsert?: BoostUpsertWithWhereUniqueWithoutSenderInput | BoostUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: BoostCreateManySenderInputEnvelope
    set?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    disconnect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    delete?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    update?: BoostUpdateWithWhereUniqueWithoutSenderInput | BoostUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: BoostUpdateManyWithWhereWithoutSenderInput | BoostUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: BoostScalarWhereInput | BoostScalarWhereInput[]
  }

  export type BoostUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<BoostCreateWithoutReceiverInput, BoostUncheckedCreateWithoutReceiverInput> | BoostCreateWithoutReceiverInput[] | BoostUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutReceiverInput | BoostCreateOrConnectWithoutReceiverInput[]
    upsert?: BoostUpsertWithWhereUniqueWithoutReceiverInput | BoostUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: BoostCreateManyReceiverInputEnvelope
    set?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    disconnect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    delete?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    update?: BoostUpdateWithWhereUniqueWithoutReceiverInput | BoostUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: BoostUpdateManyWithWhereWithoutReceiverInput | BoostUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: BoostScalarWhereInput | BoostScalarWhereInput[]
  }

  export type EventParticipationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventParticipationCreateWithoutUserInput, EventParticipationUncheckedCreateWithoutUserInput> | EventParticipationCreateWithoutUserInput[] | EventParticipationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutUserInput | EventParticipationCreateOrConnectWithoutUserInput[]
    upsert?: EventParticipationUpsertWithWhereUniqueWithoutUserInput | EventParticipationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventParticipationCreateManyUserInputEnvelope
    set?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    disconnect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    delete?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    update?: EventParticipationUpdateWithWhereUniqueWithoutUserInput | EventParticipationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventParticipationUpdateManyWithWhereWithoutUserInput | EventParticipationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventParticipationScalarWhereInput | EventParticipationScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TrackCreategenreInput = {
    set: string[]
  }

  export type TrackCreatemoodInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutTracksInput = {
    create?: XOR<UserCreateWithoutTracksInput, UserUncheckedCreateWithoutTracksInput>
    connectOrCreate?: UserCreateOrConnectWithoutTracksInput
    connect?: UserWhereUniqueInput
  }

  export type BoostCreateNestedManyWithoutTrackInput = {
    create?: XOR<BoostCreateWithoutTrackInput, BoostUncheckedCreateWithoutTrackInput> | BoostCreateWithoutTrackInput[] | BoostUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutTrackInput | BoostCreateOrConnectWithoutTrackInput[]
    createMany?: BoostCreateManyTrackInputEnvelope
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
  }

  export type EventParticipationCreateNestedManyWithoutTrackInput = {
    create?: XOR<EventParticipationCreateWithoutTrackInput, EventParticipationUncheckedCreateWithoutTrackInput> | EventParticipationCreateWithoutTrackInput[] | EventParticipationUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutTrackInput | EventParticipationCreateOrConnectWithoutTrackInput[]
    createMany?: EventParticipationCreateManyTrackInputEnvelope
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
  }

  export type BoostUncheckedCreateNestedManyWithoutTrackInput = {
    create?: XOR<BoostCreateWithoutTrackInput, BoostUncheckedCreateWithoutTrackInput> | BoostCreateWithoutTrackInput[] | BoostUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutTrackInput | BoostCreateOrConnectWithoutTrackInput[]
    createMany?: BoostCreateManyTrackInputEnvelope
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
  }

  export type EventParticipationUncheckedCreateNestedManyWithoutTrackInput = {
    create?: XOR<EventParticipationCreateWithoutTrackInput, EventParticipationUncheckedCreateWithoutTrackInput> | EventParticipationCreateWithoutTrackInput[] | EventParticipationUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutTrackInput | EventParticipationCreateOrConnectWithoutTrackInput[]
    createMany?: EventParticipationCreateManyTrackInputEnvelope
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TrackUpdategenreInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TrackUpdatemoodInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutTracksNestedInput = {
    create?: XOR<UserCreateWithoutTracksInput, UserUncheckedCreateWithoutTracksInput>
    connectOrCreate?: UserCreateOrConnectWithoutTracksInput
    upsert?: UserUpsertWithoutTracksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTracksInput, UserUpdateWithoutTracksInput>, UserUncheckedUpdateWithoutTracksInput>
  }

  export type BoostUpdateManyWithoutTrackNestedInput = {
    create?: XOR<BoostCreateWithoutTrackInput, BoostUncheckedCreateWithoutTrackInput> | BoostCreateWithoutTrackInput[] | BoostUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutTrackInput | BoostCreateOrConnectWithoutTrackInput[]
    upsert?: BoostUpsertWithWhereUniqueWithoutTrackInput | BoostUpsertWithWhereUniqueWithoutTrackInput[]
    createMany?: BoostCreateManyTrackInputEnvelope
    set?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    disconnect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    delete?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    update?: BoostUpdateWithWhereUniqueWithoutTrackInput | BoostUpdateWithWhereUniqueWithoutTrackInput[]
    updateMany?: BoostUpdateManyWithWhereWithoutTrackInput | BoostUpdateManyWithWhereWithoutTrackInput[]
    deleteMany?: BoostScalarWhereInput | BoostScalarWhereInput[]
  }

  export type EventParticipationUpdateManyWithoutTrackNestedInput = {
    create?: XOR<EventParticipationCreateWithoutTrackInput, EventParticipationUncheckedCreateWithoutTrackInput> | EventParticipationCreateWithoutTrackInput[] | EventParticipationUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutTrackInput | EventParticipationCreateOrConnectWithoutTrackInput[]
    upsert?: EventParticipationUpsertWithWhereUniqueWithoutTrackInput | EventParticipationUpsertWithWhereUniqueWithoutTrackInput[]
    createMany?: EventParticipationCreateManyTrackInputEnvelope
    set?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    disconnect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    delete?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    update?: EventParticipationUpdateWithWhereUniqueWithoutTrackInput | EventParticipationUpdateWithWhereUniqueWithoutTrackInput[]
    updateMany?: EventParticipationUpdateManyWithWhereWithoutTrackInput | EventParticipationUpdateManyWithWhereWithoutTrackInput[]
    deleteMany?: EventParticipationScalarWhereInput | EventParticipationScalarWhereInput[]
  }

  export type BoostUncheckedUpdateManyWithoutTrackNestedInput = {
    create?: XOR<BoostCreateWithoutTrackInput, BoostUncheckedCreateWithoutTrackInput> | BoostCreateWithoutTrackInput[] | BoostUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: BoostCreateOrConnectWithoutTrackInput | BoostCreateOrConnectWithoutTrackInput[]
    upsert?: BoostUpsertWithWhereUniqueWithoutTrackInput | BoostUpsertWithWhereUniqueWithoutTrackInput[]
    createMany?: BoostCreateManyTrackInputEnvelope
    set?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    disconnect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    delete?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    connect?: BoostWhereUniqueInput | BoostWhereUniqueInput[]
    update?: BoostUpdateWithWhereUniqueWithoutTrackInput | BoostUpdateWithWhereUniqueWithoutTrackInput[]
    updateMany?: BoostUpdateManyWithWhereWithoutTrackInput | BoostUpdateManyWithWhereWithoutTrackInput[]
    deleteMany?: BoostScalarWhereInput | BoostScalarWhereInput[]
  }

  export type EventParticipationUncheckedUpdateManyWithoutTrackNestedInput = {
    create?: XOR<EventParticipationCreateWithoutTrackInput, EventParticipationUncheckedCreateWithoutTrackInput> | EventParticipationCreateWithoutTrackInput[] | EventParticipationUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutTrackInput | EventParticipationCreateOrConnectWithoutTrackInput[]
    upsert?: EventParticipationUpsertWithWhereUniqueWithoutTrackInput | EventParticipationUpsertWithWhereUniqueWithoutTrackInput[]
    createMany?: EventParticipationCreateManyTrackInputEnvelope
    set?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    disconnect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    delete?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    update?: EventParticipationUpdateWithWhereUniqueWithoutTrackInput | EventParticipationUpdateWithWhereUniqueWithoutTrackInput[]
    updateMany?: EventParticipationUpdateManyWithWhereWithoutTrackInput | EventParticipationUpdateManyWithWhereWithoutTrackInput[]
    deleteMany?: EventParticipationScalarWhereInput | EventParticipationScalarWhereInput[]
  }

  export type UserStudioItemCreateNestedManyWithoutStudioItemInput = {
    create?: XOR<UserStudioItemCreateWithoutStudioItemInput, UserStudioItemUncheckedCreateWithoutStudioItemInput> | UserStudioItemCreateWithoutStudioItemInput[] | UserStudioItemUncheckedCreateWithoutStudioItemInput[]
    connectOrCreate?: UserStudioItemCreateOrConnectWithoutStudioItemInput | UserStudioItemCreateOrConnectWithoutStudioItemInput[]
    createMany?: UserStudioItemCreateManyStudioItemInputEnvelope
    connect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
  }

  export type UserStudioItemUncheckedCreateNestedManyWithoutStudioItemInput = {
    create?: XOR<UserStudioItemCreateWithoutStudioItemInput, UserStudioItemUncheckedCreateWithoutStudioItemInput> | UserStudioItemCreateWithoutStudioItemInput[] | UserStudioItemUncheckedCreateWithoutStudioItemInput[]
    connectOrCreate?: UserStudioItemCreateOrConnectWithoutStudioItemInput | UserStudioItemCreateOrConnectWithoutStudioItemInput[]
    createMany?: UserStudioItemCreateManyStudioItemInputEnvelope
    connect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
  }

  export type UserStudioItemUpdateManyWithoutStudioItemNestedInput = {
    create?: XOR<UserStudioItemCreateWithoutStudioItemInput, UserStudioItemUncheckedCreateWithoutStudioItemInput> | UserStudioItemCreateWithoutStudioItemInput[] | UserStudioItemUncheckedCreateWithoutStudioItemInput[]
    connectOrCreate?: UserStudioItemCreateOrConnectWithoutStudioItemInput | UserStudioItemCreateOrConnectWithoutStudioItemInput[]
    upsert?: UserStudioItemUpsertWithWhereUniqueWithoutStudioItemInput | UserStudioItemUpsertWithWhereUniqueWithoutStudioItemInput[]
    createMany?: UserStudioItemCreateManyStudioItemInputEnvelope
    set?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    disconnect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    delete?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    connect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    update?: UserStudioItemUpdateWithWhereUniqueWithoutStudioItemInput | UserStudioItemUpdateWithWhereUniqueWithoutStudioItemInput[]
    updateMany?: UserStudioItemUpdateManyWithWhereWithoutStudioItemInput | UserStudioItemUpdateManyWithWhereWithoutStudioItemInput[]
    deleteMany?: UserStudioItemScalarWhereInput | UserStudioItemScalarWhereInput[]
  }

  export type UserStudioItemUncheckedUpdateManyWithoutStudioItemNestedInput = {
    create?: XOR<UserStudioItemCreateWithoutStudioItemInput, UserStudioItemUncheckedCreateWithoutStudioItemInput> | UserStudioItemCreateWithoutStudioItemInput[] | UserStudioItemUncheckedCreateWithoutStudioItemInput[]
    connectOrCreate?: UserStudioItemCreateOrConnectWithoutStudioItemInput | UserStudioItemCreateOrConnectWithoutStudioItemInput[]
    upsert?: UserStudioItemUpsertWithWhereUniqueWithoutStudioItemInput | UserStudioItemUpsertWithWhereUniqueWithoutStudioItemInput[]
    createMany?: UserStudioItemCreateManyStudioItemInputEnvelope
    set?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    disconnect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    delete?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    connect?: UserStudioItemWhereUniqueInput | UserStudioItemWhereUniqueInput[]
    update?: UserStudioItemUpdateWithWhereUniqueWithoutStudioItemInput | UserStudioItemUpdateWithWhereUniqueWithoutStudioItemInput[]
    updateMany?: UserStudioItemUpdateManyWithWhereWithoutStudioItemInput | UserStudioItemUpdateManyWithWhereWithoutStudioItemInput[]
    deleteMany?: UserStudioItemScalarWhereInput | UserStudioItemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStudioItemsInput = {
    create?: XOR<UserCreateWithoutStudioItemsInput, UserUncheckedCreateWithoutStudioItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudioItemsInput
    connect?: UserWhereUniqueInput
  }

  export type StudioItemCreateNestedOneWithoutUserItemsInput = {
    create?: XOR<StudioItemCreateWithoutUserItemsInput, StudioItemUncheckedCreateWithoutUserItemsInput>
    connectOrCreate?: StudioItemCreateOrConnectWithoutUserItemsInput
    connect?: StudioItemWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStudioItemsNestedInput = {
    create?: XOR<UserCreateWithoutStudioItemsInput, UserUncheckedCreateWithoutStudioItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudioItemsInput
    upsert?: UserUpsertWithoutStudioItemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudioItemsInput, UserUpdateWithoutStudioItemsInput>, UserUncheckedUpdateWithoutStudioItemsInput>
  }

  export type StudioItemUpdateOneRequiredWithoutUserItemsNestedInput = {
    create?: XOR<StudioItemCreateWithoutUserItemsInput, StudioItemUncheckedCreateWithoutUserItemsInput>
    connectOrCreate?: StudioItemCreateOrConnectWithoutUserItemsInput
    upsert?: StudioItemUpsertWithoutUserItemsInput
    connect?: StudioItemWhereUniqueInput
    update?: XOR<XOR<StudioItemUpdateToOneWithWhereWithoutUserItemsInput, StudioItemUpdateWithoutUserItemsInput>, StudioItemUncheckedUpdateWithoutUserItemsInput>
  }

  export type GameEventCreaterequiredGenresInput = {
    set: string[]
  }

  export type GameEventCreaterequiredMoodsInput = {
    set: string[]
  }

  export type EventParticipationCreateNestedManyWithoutEventInput = {
    create?: XOR<EventParticipationCreateWithoutEventInput, EventParticipationUncheckedCreateWithoutEventInput> | EventParticipationCreateWithoutEventInput[] | EventParticipationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutEventInput | EventParticipationCreateOrConnectWithoutEventInput[]
    createMany?: EventParticipationCreateManyEventInputEnvelope
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
  }

  export type EventParticipationUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventParticipationCreateWithoutEventInput, EventParticipationUncheckedCreateWithoutEventInput> | EventParticipationCreateWithoutEventInput[] | EventParticipationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutEventInput | EventParticipationCreateOrConnectWithoutEventInput[]
    createMany?: EventParticipationCreateManyEventInputEnvelope
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
  }

  export type GameEventUpdaterequiredGenresInput = {
    set?: string[]
    push?: string | string[]
  }

  export type GameEventUpdaterequiredMoodsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EventParticipationUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventParticipationCreateWithoutEventInput, EventParticipationUncheckedCreateWithoutEventInput> | EventParticipationCreateWithoutEventInput[] | EventParticipationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutEventInput | EventParticipationCreateOrConnectWithoutEventInput[]
    upsert?: EventParticipationUpsertWithWhereUniqueWithoutEventInput | EventParticipationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventParticipationCreateManyEventInputEnvelope
    set?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    disconnect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    delete?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    update?: EventParticipationUpdateWithWhereUniqueWithoutEventInput | EventParticipationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventParticipationUpdateManyWithWhereWithoutEventInput | EventParticipationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventParticipationScalarWhereInput | EventParticipationScalarWhereInput[]
  }

  export type EventParticipationUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventParticipationCreateWithoutEventInput, EventParticipationUncheckedCreateWithoutEventInput> | EventParticipationCreateWithoutEventInput[] | EventParticipationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventParticipationCreateOrConnectWithoutEventInput | EventParticipationCreateOrConnectWithoutEventInput[]
    upsert?: EventParticipationUpsertWithWhereUniqueWithoutEventInput | EventParticipationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventParticipationCreateManyEventInputEnvelope
    set?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    disconnect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    delete?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    connect?: EventParticipationWhereUniqueInput | EventParticipationWhereUniqueInput[]
    update?: EventParticipationUpdateWithWhereUniqueWithoutEventInput | EventParticipationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventParticipationUpdateManyWithWhereWithoutEventInput | EventParticipationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventParticipationScalarWhereInput | EventParticipationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutParticipationsInput = {
    create?: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipationsInput
    connect?: UserWhereUniqueInput
  }

  export type GameEventCreateNestedOneWithoutParticipationsInput = {
    create?: XOR<GameEventCreateWithoutParticipationsInput, GameEventUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: GameEventCreateOrConnectWithoutParticipationsInput
    connect?: GameEventWhereUniqueInput
  }

  export type TrackCreateNestedOneWithoutEventParticipationsInput = {
    create?: XOR<TrackCreateWithoutEventParticipationsInput, TrackUncheckedCreateWithoutEventParticipationsInput>
    connectOrCreate?: TrackCreateOrConnectWithoutEventParticipationsInput
    connect?: TrackWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutParticipationsNestedInput = {
    create?: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipationsInput
    upsert?: UserUpsertWithoutParticipationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParticipationsInput, UserUpdateWithoutParticipationsInput>, UserUncheckedUpdateWithoutParticipationsInput>
  }

  export type GameEventUpdateOneRequiredWithoutParticipationsNestedInput = {
    create?: XOR<GameEventCreateWithoutParticipationsInput, GameEventUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: GameEventCreateOrConnectWithoutParticipationsInput
    upsert?: GameEventUpsertWithoutParticipationsInput
    connect?: GameEventWhereUniqueInput
    update?: XOR<XOR<GameEventUpdateToOneWithWhereWithoutParticipationsInput, GameEventUpdateWithoutParticipationsInput>, GameEventUncheckedUpdateWithoutParticipationsInput>
  }

  export type TrackUpdateOneRequiredWithoutEventParticipationsNestedInput = {
    create?: XOR<TrackCreateWithoutEventParticipationsInput, TrackUncheckedCreateWithoutEventParticipationsInput>
    connectOrCreate?: TrackCreateOrConnectWithoutEventParticipationsInput
    upsert?: TrackUpsertWithoutEventParticipationsInput
    connect?: TrackWhereUniqueInput
    update?: XOR<XOR<TrackUpdateToOneWithWhereWithoutEventParticipationsInput, TrackUpdateWithoutEventParticipationsInput>, TrackUncheckedUpdateWithoutEventParticipationsInput>
  }

  export type UserCreateNestedOneWithoutSentBoostsInput = {
    create?: XOR<UserCreateWithoutSentBoostsInput, UserUncheckedCreateWithoutSentBoostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentBoostsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedBoostsInput = {
    create?: XOR<UserCreateWithoutReceivedBoostsInput, UserUncheckedCreateWithoutReceivedBoostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedBoostsInput
    connect?: UserWhereUniqueInput
  }

  export type TrackCreateNestedOneWithoutBoostsInput = {
    create?: XOR<TrackCreateWithoutBoostsInput, TrackUncheckedCreateWithoutBoostsInput>
    connectOrCreate?: TrackCreateOrConnectWithoutBoostsInput
    connect?: TrackWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSentBoostsNestedInput = {
    create?: XOR<UserCreateWithoutSentBoostsInput, UserUncheckedCreateWithoutSentBoostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentBoostsInput
    upsert?: UserUpsertWithoutSentBoostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentBoostsInput, UserUpdateWithoutSentBoostsInput>, UserUncheckedUpdateWithoutSentBoostsInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedBoostsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedBoostsInput, UserUncheckedCreateWithoutReceivedBoostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedBoostsInput
    upsert?: UserUpsertWithoutReceivedBoostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedBoostsInput, UserUpdateWithoutReceivedBoostsInput>, UserUncheckedUpdateWithoutReceivedBoostsInput>
  }

  export type TrackUpdateOneRequiredWithoutBoostsNestedInput = {
    create?: XOR<TrackCreateWithoutBoostsInput, TrackUncheckedCreateWithoutBoostsInput>
    connectOrCreate?: TrackCreateOrConnectWithoutBoostsInput
    upsert?: TrackUpsertWithoutBoostsInput
    connect?: TrackWhereUniqueInput
    update?: XOR<XOR<TrackUpdateToOneWithWhereWithoutBoostsInput, TrackUpdateWithoutBoostsInput>, TrackUncheckedUpdateWithoutBoostsInput>
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsInput, UserUpdateWithoutTransactionsInput>, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TrackCreateWithoutUserInput = {
    id?: string
    soundcloudTrackId: string
    title: string
    artwork?: string | null
    genre?: TrackCreategenreInput | string[]
    mood?: TrackCreatemoodInput | string[]
    baseValue?: number
    currentValue?: number
    playCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    boosts?: BoostCreateNestedManyWithoutTrackInput
    eventParticipations?: EventParticipationCreateNestedManyWithoutTrackInput
  }

  export type TrackUncheckedCreateWithoutUserInput = {
    id?: string
    soundcloudTrackId: string
    title: string
    artwork?: string | null
    genre?: TrackCreategenreInput | string[]
    mood?: TrackCreatemoodInput | string[]
    baseValue?: number
    currentValue?: number
    playCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    boosts?: BoostUncheckedCreateNestedManyWithoutTrackInput
    eventParticipations?: EventParticipationUncheckedCreateNestedManyWithoutTrackInput
  }

  export type TrackCreateOrConnectWithoutUserInput = {
    where: TrackWhereUniqueInput
    create: XOR<TrackCreateWithoutUserInput, TrackUncheckedCreateWithoutUserInput>
  }

  export type TrackCreateManyUserInputEnvelope = {
    data: TrackCreateManyUserInput | TrackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserStudioItemCreateWithoutUserInput = {
    id?: string
    purchasedAt?: Date | string
    studioItem: StudioItemCreateNestedOneWithoutUserItemsInput
  }

  export type UserStudioItemUncheckedCreateWithoutUserInput = {
    id?: string
    purchasedAt?: Date | string
    studioItemId: string
  }

  export type UserStudioItemCreateOrConnectWithoutUserInput = {
    where: UserStudioItemWhereUniqueInput
    create: XOR<UserStudioItemCreateWithoutUserInput, UserStudioItemUncheckedCreateWithoutUserInput>
  }

  export type UserStudioItemCreateManyUserInputEnvelope = {
    data: UserStudioItemCreateManyUserInput | UserStudioItemCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BoostCreateWithoutSenderInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    receiver: UserCreateNestedOneWithoutReceivedBoostsInput
    track: TrackCreateNestedOneWithoutBoostsInput
  }

  export type BoostUncheckedCreateWithoutSenderInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    receiverId: string
    trackId: string
  }

  export type BoostCreateOrConnectWithoutSenderInput = {
    where: BoostWhereUniqueInput
    create: XOR<BoostCreateWithoutSenderInput, BoostUncheckedCreateWithoutSenderInput>
  }

  export type BoostCreateManySenderInputEnvelope = {
    data: BoostCreateManySenderInput | BoostCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type BoostCreateWithoutReceiverInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutSentBoostsInput
    track: TrackCreateNestedOneWithoutBoostsInput
  }

  export type BoostUncheckedCreateWithoutReceiverInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    senderId: string
    trackId: string
  }

  export type BoostCreateOrConnectWithoutReceiverInput = {
    where: BoostWhereUniqueInput
    create: XOR<BoostCreateWithoutReceiverInput, BoostUncheckedCreateWithoutReceiverInput>
  }

  export type BoostCreateManyReceiverInputEnvelope = {
    data: BoostCreateManyReceiverInput | BoostCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type EventParticipationCreateWithoutUserInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    event: GameEventCreateNestedOneWithoutParticipationsInput
    track: TrackCreateNestedOneWithoutEventParticipationsInput
  }

  export type EventParticipationUncheckedCreateWithoutUserInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    eventId: string
    trackId: string
  }

  export type EventParticipationCreateOrConnectWithoutUserInput = {
    where: EventParticipationWhereUniqueInput
    create: XOR<EventParticipationCreateWithoutUserInput, EventParticipationUncheckedCreateWithoutUserInput>
  }

  export type EventParticipationCreateManyUserInputEnvelope = {
    data: EventParticipationCreateManyUserInput | EventParticipationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutUserInput = {
    id?: string
    type: string
    amount: number
    description: string
    createdAt?: Date | string
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    amount: number
    description: string
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: TransactionCreateManyUserInput | TransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TrackUpsertWithWhereUniqueWithoutUserInput = {
    where: TrackWhereUniqueInput
    update: XOR<TrackUpdateWithoutUserInput, TrackUncheckedUpdateWithoutUserInput>
    create: XOR<TrackCreateWithoutUserInput, TrackUncheckedCreateWithoutUserInput>
  }

  export type TrackUpdateWithWhereUniqueWithoutUserInput = {
    where: TrackWhereUniqueInput
    data: XOR<TrackUpdateWithoutUserInput, TrackUncheckedUpdateWithoutUserInput>
  }

  export type TrackUpdateManyWithWhereWithoutUserInput = {
    where: TrackScalarWhereInput
    data: XOR<TrackUpdateManyMutationInput, TrackUncheckedUpdateManyWithoutUserInput>
  }

  export type TrackScalarWhereInput = {
    AND?: TrackScalarWhereInput | TrackScalarWhereInput[]
    OR?: TrackScalarWhereInput[]
    NOT?: TrackScalarWhereInput | TrackScalarWhereInput[]
    id?: StringFilter<"Track"> | string
    soundcloudTrackId?: StringFilter<"Track"> | string
    title?: StringFilter<"Track"> | string
    artwork?: StringNullableFilter<"Track"> | string | null
    genre?: StringNullableListFilter<"Track">
    mood?: StringNullableListFilter<"Track">
    baseValue?: FloatFilter<"Track"> | number
    currentValue?: FloatFilter<"Track"> | number
    playCount?: IntFilter<"Track"> | number
    createdAt?: DateTimeFilter<"Track"> | Date | string
    updatedAt?: DateTimeFilter<"Track"> | Date | string
    userId?: StringFilter<"Track"> | string
  }

  export type UserStudioItemUpsertWithWhereUniqueWithoutUserInput = {
    where: UserStudioItemWhereUniqueInput
    update: XOR<UserStudioItemUpdateWithoutUserInput, UserStudioItemUncheckedUpdateWithoutUserInput>
    create: XOR<UserStudioItemCreateWithoutUserInput, UserStudioItemUncheckedCreateWithoutUserInput>
  }

  export type UserStudioItemUpdateWithWhereUniqueWithoutUserInput = {
    where: UserStudioItemWhereUniqueInput
    data: XOR<UserStudioItemUpdateWithoutUserInput, UserStudioItemUncheckedUpdateWithoutUserInput>
  }

  export type UserStudioItemUpdateManyWithWhereWithoutUserInput = {
    where: UserStudioItemScalarWhereInput
    data: XOR<UserStudioItemUpdateManyMutationInput, UserStudioItemUncheckedUpdateManyWithoutUserInput>
  }

  export type UserStudioItemScalarWhereInput = {
    AND?: UserStudioItemScalarWhereInput | UserStudioItemScalarWhereInput[]
    OR?: UserStudioItemScalarWhereInput[]
    NOT?: UserStudioItemScalarWhereInput | UserStudioItemScalarWhereInput[]
    id?: StringFilter<"UserStudioItem"> | string
    purchasedAt?: DateTimeFilter<"UserStudioItem"> | Date | string
    userId?: StringFilter<"UserStudioItem"> | string
    studioItemId?: StringFilter<"UserStudioItem"> | string
  }

  export type BoostUpsertWithWhereUniqueWithoutSenderInput = {
    where: BoostWhereUniqueInput
    update: XOR<BoostUpdateWithoutSenderInput, BoostUncheckedUpdateWithoutSenderInput>
    create: XOR<BoostCreateWithoutSenderInput, BoostUncheckedCreateWithoutSenderInput>
  }

  export type BoostUpdateWithWhereUniqueWithoutSenderInput = {
    where: BoostWhereUniqueInput
    data: XOR<BoostUpdateWithoutSenderInput, BoostUncheckedUpdateWithoutSenderInput>
  }

  export type BoostUpdateManyWithWhereWithoutSenderInput = {
    where: BoostScalarWhereInput
    data: XOR<BoostUpdateManyMutationInput, BoostUncheckedUpdateManyWithoutSenderInput>
  }

  export type BoostScalarWhereInput = {
    AND?: BoostScalarWhereInput | BoostScalarWhereInput[]
    OR?: BoostScalarWhereInput[]
    NOT?: BoostScalarWhereInput | BoostScalarWhereInput[]
    id?: StringFilter<"Boost"> | string
    amount?: FloatFilter<"Boost"> | number
    duration?: IntFilter<"Boost"> | number
    startTime?: DateTimeFilter<"Boost"> | Date | string
    endTime?: DateTimeFilter<"Boost"> | Date | string
    createdAt?: DateTimeFilter<"Boost"> | Date | string
    senderId?: StringFilter<"Boost"> | string
    receiverId?: StringFilter<"Boost"> | string
    trackId?: StringFilter<"Boost"> | string
  }

  export type BoostUpsertWithWhereUniqueWithoutReceiverInput = {
    where: BoostWhereUniqueInput
    update: XOR<BoostUpdateWithoutReceiverInput, BoostUncheckedUpdateWithoutReceiverInput>
    create: XOR<BoostCreateWithoutReceiverInput, BoostUncheckedCreateWithoutReceiverInput>
  }

  export type BoostUpdateWithWhereUniqueWithoutReceiverInput = {
    where: BoostWhereUniqueInput
    data: XOR<BoostUpdateWithoutReceiverInput, BoostUncheckedUpdateWithoutReceiverInput>
  }

  export type BoostUpdateManyWithWhereWithoutReceiverInput = {
    where: BoostScalarWhereInput
    data: XOR<BoostUpdateManyMutationInput, BoostUncheckedUpdateManyWithoutReceiverInput>
  }

  export type EventParticipationUpsertWithWhereUniqueWithoutUserInput = {
    where: EventParticipationWhereUniqueInput
    update: XOR<EventParticipationUpdateWithoutUserInput, EventParticipationUncheckedUpdateWithoutUserInput>
    create: XOR<EventParticipationCreateWithoutUserInput, EventParticipationUncheckedCreateWithoutUserInput>
  }

  export type EventParticipationUpdateWithWhereUniqueWithoutUserInput = {
    where: EventParticipationWhereUniqueInput
    data: XOR<EventParticipationUpdateWithoutUserInput, EventParticipationUncheckedUpdateWithoutUserInput>
  }

  export type EventParticipationUpdateManyWithWhereWithoutUserInput = {
    where: EventParticipationScalarWhereInput
    data: XOR<EventParticipationUpdateManyMutationInput, EventParticipationUncheckedUpdateManyWithoutUserInput>
  }

  export type EventParticipationScalarWhereInput = {
    AND?: EventParticipationScalarWhereInput | EventParticipationScalarWhereInput[]
    OR?: EventParticipationScalarWhereInput[]
    NOT?: EventParticipationScalarWhereInput | EventParticipationScalarWhereInput[]
    id?: StringFilter<"EventParticipation"> | string
    joinedAt?: DateTimeFilter<"EventParticipation"> | Date | string
    score?: FloatFilter<"EventParticipation"> | number
    userId?: StringFilter<"EventParticipation"> | string
    eventId?: StringFilter<"EventParticipation"> | string
    trackId?: StringFilter<"EventParticipation"> | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    type?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    description?: StringFilter<"Transaction"> | string
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    userId?: StringFilter<"Transaction"> | string
  }

  export type UserCreateWithoutTracksInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    studioItems?: UserStudioItemCreateNestedManyWithoutUserInput
    sentBoosts?: BoostCreateNestedManyWithoutSenderInput
    receivedBoosts?: BoostCreateNestedManyWithoutReceiverInput
    participations?: EventParticipationCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTracksInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    studioItems?: UserStudioItemUncheckedCreateNestedManyWithoutUserInput
    sentBoosts?: BoostUncheckedCreateNestedManyWithoutSenderInput
    receivedBoosts?: BoostUncheckedCreateNestedManyWithoutReceiverInput
    participations?: EventParticipationUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTracksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTracksInput, UserUncheckedCreateWithoutTracksInput>
  }

  export type BoostCreateWithoutTrackInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutSentBoostsInput
    receiver: UserCreateNestedOneWithoutReceivedBoostsInput
  }

  export type BoostUncheckedCreateWithoutTrackInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    senderId: string
    receiverId: string
  }

  export type BoostCreateOrConnectWithoutTrackInput = {
    where: BoostWhereUniqueInput
    create: XOR<BoostCreateWithoutTrackInput, BoostUncheckedCreateWithoutTrackInput>
  }

  export type BoostCreateManyTrackInputEnvelope = {
    data: BoostCreateManyTrackInput | BoostCreateManyTrackInput[]
    skipDuplicates?: boolean
  }

  export type EventParticipationCreateWithoutTrackInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    user: UserCreateNestedOneWithoutParticipationsInput
    event: GameEventCreateNestedOneWithoutParticipationsInput
  }

  export type EventParticipationUncheckedCreateWithoutTrackInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    userId: string
    eventId: string
  }

  export type EventParticipationCreateOrConnectWithoutTrackInput = {
    where: EventParticipationWhereUniqueInput
    create: XOR<EventParticipationCreateWithoutTrackInput, EventParticipationUncheckedCreateWithoutTrackInput>
  }

  export type EventParticipationCreateManyTrackInputEnvelope = {
    data: EventParticipationCreateManyTrackInput | EventParticipationCreateManyTrackInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTracksInput = {
    update: XOR<UserUpdateWithoutTracksInput, UserUncheckedUpdateWithoutTracksInput>
    create: XOR<UserCreateWithoutTracksInput, UserUncheckedCreateWithoutTracksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTracksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTracksInput, UserUncheckedUpdateWithoutTracksInput>
  }

  export type UserUpdateWithoutTracksInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studioItems?: UserStudioItemUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUpdateManyWithoutSenderNestedInput
    receivedBoosts?: BoostUpdateManyWithoutReceiverNestedInput
    participations?: EventParticipationUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTracksInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studioItems?: UserStudioItemUncheckedUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUncheckedUpdateManyWithoutSenderNestedInput
    receivedBoosts?: BoostUncheckedUpdateManyWithoutReceiverNestedInput
    participations?: EventParticipationUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BoostUpsertWithWhereUniqueWithoutTrackInput = {
    where: BoostWhereUniqueInput
    update: XOR<BoostUpdateWithoutTrackInput, BoostUncheckedUpdateWithoutTrackInput>
    create: XOR<BoostCreateWithoutTrackInput, BoostUncheckedCreateWithoutTrackInput>
  }

  export type BoostUpdateWithWhereUniqueWithoutTrackInput = {
    where: BoostWhereUniqueInput
    data: XOR<BoostUpdateWithoutTrackInput, BoostUncheckedUpdateWithoutTrackInput>
  }

  export type BoostUpdateManyWithWhereWithoutTrackInput = {
    where: BoostScalarWhereInput
    data: XOR<BoostUpdateManyMutationInput, BoostUncheckedUpdateManyWithoutTrackInput>
  }

  export type EventParticipationUpsertWithWhereUniqueWithoutTrackInput = {
    where: EventParticipationWhereUniqueInput
    update: XOR<EventParticipationUpdateWithoutTrackInput, EventParticipationUncheckedUpdateWithoutTrackInput>
    create: XOR<EventParticipationCreateWithoutTrackInput, EventParticipationUncheckedCreateWithoutTrackInput>
  }

  export type EventParticipationUpdateWithWhereUniqueWithoutTrackInput = {
    where: EventParticipationWhereUniqueInput
    data: XOR<EventParticipationUpdateWithoutTrackInput, EventParticipationUncheckedUpdateWithoutTrackInput>
  }

  export type EventParticipationUpdateManyWithWhereWithoutTrackInput = {
    where: EventParticipationScalarWhereInput
    data: XOR<EventParticipationUpdateManyMutationInput, EventParticipationUncheckedUpdateManyWithoutTrackInput>
  }

  export type UserStudioItemCreateWithoutStudioItemInput = {
    id?: string
    purchasedAt?: Date | string
    user: UserCreateNestedOneWithoutStudioItemsInput
  }

  export type UserStudioItemUncheckedCreateWithoutStudioItemInput = {
    id?: string
    purchasedAt?: Date | string
    userId: string
  }

  export type UserStudioItemCreateOrConnectWithoutStudioItemInput = {
    where: UserStudioItemWhereUniqueInput
    create: XOR<UserStudioItemCreateWithoutStudioItemInput, UserStudioItemUncheckedCreateWithoutStudioItemInput>
  }

  export type UserStudioItemCreateManyStudioItemInputEnvelope = {
    data: UserStudioItemCreateManyStudioItemInput | UserStudioItemCreateManyStudioItemInput[]
    skipDuplicates?: boolean
  }

  export type UserStudioItemUpsertWithWhereUniqueWithoutStudioItemInput = {
    where: UserStudioItemWhereUniqueInput
    update: XOR<UserStudioItemUpdateWithoutStudioItemInput, UserStudioItemUncheckedUpdateWithoutStudioItemInput>
    create: XOR<UserStudioItemCreateWithoutStudioItemInput, UserStudioItemUncheckedCreateWithoutStudioItemInput>
  }

  export type UserStudioItemUpdateWithWhereUniqueWithoutStudioItemInput = {
    where: UserStudioItemWhereUniqueInput
    data: XOR<UserStudioItemUpdateWithoutStudioItemInput, UserStudioItemUncheckedUpdateWithoutStudioItemInput>
  }

  export type UserStudioItemUpdateManyWithWhereWithoutStudioItemInput = {
    where: UserStudioItemScalarWhereInput
    data: XOR<UserStudioItemUpdateManyMutationInput, UserStudioItemUncheckedUpdateManyWithoutStudioItemInput>
  }

  export type UserCreateWithoutStudioItemsInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackCreateNestedManyWithoutUserInput
    sentBoosts?: BoostCreateNestedManyWithoutSenderInput
    receivedBoosts?: BoostCreateNestedManyWithoutReceiverInput
    participations?: EventParticipationCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudioItemsInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutUserInput
    sentBoosts?: BoostUncheckedCreateNestedManyWithoutSenderInput
    receivedBoosts?: BoostUncheckedCreateNestedManyWithoutReceiverInput
    participations?: EventParticipationUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudioItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudioItemsInput, UserUncheckedCreateWithoutStudioItemsInput>
  }

  export type StudioItemCreateWithoutUserItemsInput = {
    id?: string
    name: string
    description: string
    type: string
    price: number
    bonusMultiplier: number
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type StudioItemUncheckedCreateWithoutUserItemsInput = {
    id?: string
    name: string
    description: string
    type: string
    price: number
    bonusMultiplier: number
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type StudioItemCreateOrConnectWithoutUserItemsInput = {
    where: StudioItemWhereUniqueInput
    create: XOR<StudioItemCreateWithoutUserItemsInput, StudioItemUncheckedCreateWithoutUserItemsInput>
  }

  export type UserUpsertWithoutStudioItemsInput = {
    update: XOR<UserUpdateWithoutStudioItemsInput, UserUncheckedUpdateWithoutStudioItemsInput>
    create: XOR<UserCreateWithoutStudioItemsInput, UserUncheckedCreateWithoutStudioItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudioItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudioItemsInput, UserUncheckedUpdateWithoutStudioItemsInput>
  }

  export type UserUpdateWithoutStudioItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUpdateManyWithoutSenderNestedInput
    receivedBoosts?: BoostUpdateManyWithoutReceiverNestedInput
    participations?: EventParticipationUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudioItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUncheckedUpdateManyWithoutSenderNestedInput
    receivedBoosts?: BoostUncheckedUpdateManyWithoutReceiverNestedInput
    participations?: EventParticipationUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StudioItemUpsertWithoutUserItemsInput = {
    update: XOR<StudioItemUpdateWithoutUserItemsInput, StudioItemUncheckedUpdateWithoutUserItemsInput>
    create: XOR<StudioItemCreateWithoutUserItemsInput, StudioItemUncheckedCreateWithoutUserItemsInput>
    where?: StudioItemWhereInput
  }

  export type StudioItemUpdateToOneWithWhereWithoutUserItemsInput = {
    where?: StudioItemWhereInput
    data: XOR<StudioItemUpdateWithoutUserItemsInput, StudioItemUncheckedUpdateWithoutUserItemsInput>
  }

  export type StudioItemUpdateWithoutUserItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    bonusMultiplier?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudioItemUncheckedUpdateWithoutUserItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    bonusMultiplier?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventParticipationCreateWithoutEventInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    user: UserCreateNestedOneWithoutParticipationsInput
    track: TrackCreateNestedOneWithoutEventParticipationsInput
  }

  export type EventParticipationUncheckedCreateWithoutEventInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    userId: string
    trackId: string
  }

  export type EventParticipationCreateOrConnectWithoutEventInput = {
    where: EventParticipationWhereUniqueInput
    create: XOR<EventParticipationCreateWithoutEventInput, EventParticipationUncheckedCreateWithoutEventInput>
  }

  export type EventParticipationCreateManyEventInputEnvelope = {
    data: EventParticipationCreateManyEventInput | EventParticipationCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EventParticipationUpsertWithWhereUniqueWithoutEventInput = {
    where: EventParticipationWhereUniqueInput
    update: XOR<EventParticipationUpdateWithoutEventInput, EventParticipationUncheckedUpdateWithoutEventInput>
    create: XOR<EventParticipationCreateWithoutEventInput, EventParticipationUncheckedCreateWithoutEventInput>
  }

  export type EventParticipationUpdateWithWhereUniqueWithoutEventInput = {
    where: EventParticipationWhereUniqueInput
    data: XOR<EventParticipationUpdateWithoutEventInput, EventParticipationUncheckedUpdateWithoutEventInput>
  }

  export type EventParticipationUpdateManyWithWhereWithoutEventInput = {
    where: EventParticipationScalarWhereInput
    data: XOR<EventParticipationUpdateManyMutationInput, EventParticipationUncheckedUpdateManyWithoutEventInput>
  }

  export type UserCreateWithoutParticipationsInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackCreateNestedManyWithoutUserInput
    studioItems?: UserStudioItemCreateNestedManyWithoutUserInput
    sentBoosts?: BoostCreateNestedManyWithoutSenderInput
    receivedBoosts?: BoostCreateNestedManyWithoutReceiverInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutParticipationsInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutUserInput
    studioItems?: UserStudioItemUncheckedCreateNestedManyWithoutUserInput
    sentBoosts?: BoostUncheckedCreateNestedManyWithoutSenderInput
    receivedBoosts?: BoostUncheckedCreateNestedManyWithoutReceiverInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutParticipationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
  }

  export type GameEventCreateWithoutParticipationsInput = {
    id?: string
    name: string
    description: string
    startDate: Date | string
    endDate: Date | string
    requiredGenres?: GameEventCreaterequiredGenresInput | string[]
    requiredMoods?: GameEventCreaterequiredMoodsInput | string[]
    rewardAmount: number
    status: string
    createdAt?: Date | string
  }

  export type GameEventUncheckedCreateWithoutParticipationsInput = {
    id?: string
    name: string
    description: string
    startDate: Date | string
    endDate: Date | string
    requiredGenres?: GameEventCreaterequiredGenresInput | string[]
    requiredMoods?: GameEventCreaterequiredMoodsInput | string[]
    rewardAmount: number
    status: string
    createdAt?: Date | string
  }

  export type GameEventCreateOrConnectWithoutParticipationsInput = {
    where: GameEventWhereUniqueInput
    create: XOR<GameEventCreateWithoutParticipationsInput, GameEventUncheckedCreateWithoutParticipationsInput>
  }

  export type TrackCreateWithoutEventParticipationsInput = {
    id?: string
    soundcloudTrackId: string
    title: string
    artwork?: string | null
    genre?: TrackCreategenreInput | string[]
    mood?: TrackCreatemoodInput | string[]
    baseValue?: number
    currentValue?: number
    playCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTracksInput
    boosts?: BoostCreateNestedManyWithoutTrackInput
  }

  export type TrackUncheckedCreateWithoutEventParticipationsInput = {
    id?: string
    soundcloudTrackId: string
    title: string
    artwork?: string | null
    genre?: TrackCreategenreInput | string[]
    mood?: TrackCreatemoodInput | string[]
    baseValue?: number
    currentValue?: number
    playCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    boosts?: BoostUncheckedCreateNestedManyWithoutTrackInput
  }

  export type TrackCreateOrConnectWithoutEventParticipationsInput = {
    where: TrackWhereUniqueInput
    create: XOR<TrackCreateWithoutEventParticipationsInput, TrackUncheckedCreateWithoutEventParticipationsInput>
  }

  export type UserUpsertWithoutParticipationsInput = {
    update: XOR<UserUpdateWithoutParticipationsInput, UserUncheckedUpdateWithoutParticipationsInput>
    create: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParticipationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParticipationsInput, UserUncheckedUpdateWithoutParticipationsInput>
  }

  export type UserUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUpdateManyWithoutUserNestedInput
    studioItems?: UserStudioItemUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUpdateManyWithoutSenderNestedInput
    receivedBoosts?: BoostUpdateManyWithoutReceiverNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutUserNestedInput
    studioItems?: UserStudioItemUncheckedUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUncheckedUpdateManyWithoutSenderNestedInput
    receivedBoosts?: BoostUncheckedUpdateManyWithoutReceiverNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameEventUpsertWithoutParticipationsInput = {
    update: XOR<GameEventUpdateWithoutParticipationsInput, GameEventUncheckedUpdateWithoutParticipationsInput>
    create: XOR<GameEventCreateWithoutParticipationsInput, GameEventUncheckedCreateWithoutParticipationsInput>
    where?: GameEventWhereInput
  }

  export type GameEventUpdateToOneWithWhereWithoutParticipationsInput = {
    where?: GameEventWhereInput
    data: XOR<GameEventUpdateWithoutParticipationsInput, GameEventUncheckedUpdateWithoutParticipationsInput>
  }

  export type GameEventUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredGenres?: GameEventUpdaterequiredGenresInput | string[]
    requiredMoods?: GameEventUpdaterequiredMoodsInput | string[]
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameEventUncheckedUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    requiredGenres?: GameEventUpdaterequiredGenresInput | string[]
    requiredMoods?: GameEventUpdaterequiredMoodsInput | string[]
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackUpsertWithoutEventParticipationsInput = {
    update: XOR<TrackUpdateWithoutEventParticipationsInput, TrackUncheckedUpdateWithoutEventParticipationsInput>
    create: XOR<TrackCreateWithoutEventParticipationsInput, TrackUncheckedCreateWithoutEventParticipationsInput>
    where?: TrackWhereInput
  }

  export type TrackUpdateToOneWithWhereWithoutEventParticipationsInput = {
    where?: TrackWhereInput
    data: XOR<TrackUpdateWithoutEventParticipationsInput, TrackUncheckedUpdateWithoutEventParticipationsInput>
  }

  export type TrackUpdateWithoutEventParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTracksNestedInput
    boosts?: BoostUpdateManyWithoutTrackNestedInput
  }

  export type TrackUncheckedUpdateWithoutEventParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    boosts?: BoostUncheckedUpdateManyWithoutTrackNestedInput
  }

  export type UserCreateWithoutSentBoostsInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackCreateNestedManyWithoutUserInput
    studioItems?: UserStudioItemCreateNestedManyWithoutUserInput
    receivedBoosts?: BoostCreateNestedManyWithoutReceiverInput
    participations?: EventParticipationCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentBoostsInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutUserInput
    studioItems?: UserStudioItemUncheckedCreateNestedManyWithoutUserInput
    receivedBoosts?: BoostUncheckedCreateNestedManyWithoutReceiverInput
    participations?: EventParticipationUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentBoostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentBoostsInput, UserUncheckedCreateWithoutSentBoostsInput>
  }

  export type UserCreateWithoutReceivedBoostsInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackCreateNestedManyWithoutUserInput
    studioItems?: UserStudioItemCreateNestedManyWithoutUserInput
    sentBoosts?: BoostCreateNestedManyWithoutSenderInput
    participations?: EventParticipationCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedBoostsInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutUserInput
    studioItems?: UserStudioItemUncheckedCreateNestedManyWithoutUserInput
    sentBoosts?: BoostUncheckedCreateNestedManyWithoutSenderInput
    participations?: EventParticipationUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedBoostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedBoostsInput, UserUncheckedCreateWithoutReceivedBoostsInput>
  }

  export type TrackCreateWithoutBoostsInput = {
    id?: string
    soundcloudTrackId: string
    title: string
    artwork?: string | null
    genre?: TrackCreategenreInput | string[]
    mood?: TrackCreatemoodInput | string[]
    baseValue?: number
    currentValue?: number
    playCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTracksInput
    eventParticipations?: EventParticipationCreateNestedManyWithoutTrackInput
  }

  export type TrackUncheckedCreateWithoutBoostsInput = {
    id?: string
    soundcloudTrackId: string
    title: string
    artwork?: string | null
    genre?: TrackCreategenreInput | string[]
    mood?: TrackCreatemoodInput | string[]
    baseValue?: number
    currentValue?: number
    playCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    eventParticipations?: EventParticipationUncheckedCreateNestedManyWithoutTrackInput
  }

  export type TrackCreateOrConnectWithoutBoostsInput = {
    where: TrackWhereUniqueInput
    create: XOR<TrackCreateWithoutBoostsInput, TrackUncheckedCreateWithoutBoostsInput>
  }

  export type UserUpsertWithoutSentBoostsInput = {
    update: XOR<UserUpdateWithoutSentBoostsInput, UserUncheckedUpdateWithoutSentBoostsInput>
    create: XOR<UserCreateWithoutSentBoostsInput, UserUncheckedCreateWithoutSentBoostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentBoostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentBoostsInput, UserUncheckedUpdateWithoutSentBoostsInput>
  }

  export type UserUpdateWithoutSentBoostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUpdateManyWithoutUserNestedInput
    studioItems?: UserStudioItemUpdateManyWithoutUserNestedInput
    receivedBoosts?: BoostUpdateManyWithoutReceiverNestedInput
    participations?: EventParticipationUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentBoostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutUserNestedInput
    studioItems?: UserStudioItemUncheckedUpdateManyWithoutUserNestedInput
    receivedBoosts?: BoostUncheckedUpdateManyWithoutReceiverNestedInput
    participations?: EventParticipationUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedBoostsInput = {
    update: XOR<UserUpdateWithoutReceivedBoostsInput, UserUncheckedUpdateWithoutReceivedBoostsInput>
    create: XOR<UserCreateWithoutReceivedBoostsInput, UserUncheckedCreateWithoutReceivedBoostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedBoostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedBoostsInput, UserUncheckedUpdateWithoutReceivedBoostsInput>
  }

  export type UserUpdateWithoutReceivedBoostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUpdateManyWithoutUserNestedInput
    studioItems?: UserStudioItemUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUpdateManyWithoutSenderNestedInput
    participations?: EventParticipationUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedBoostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutUserNestedInput
    studioItems?: UserStudioItemUncheckedUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUncheckedUpdateManyWithoutSenderNestedInput
    participations?: EventParticipationUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TrackUpsertWithoutBoostsInput = {
    update: XOR<TrackUpdateWithoutBoostsInput, TrackUncheckedUpdateWithoutBoostsInput>
    create: XOR<TrackCreateWithoutBoostsInput, TrackUncheckedCreateWithoutBoostsInput>
    where?: TrackWhereInput
  }

  export type TrackUpdateToOneWithWhereWithoutBoostsInput = {
    where?: TrackWhereInput
    data: XOR<TrackUpdateWithoutBoostsInput, TrackUncheckedUpdateWithoutBoostsInput>
  }

  export type TrackUpdateWithoutBoostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTracksNestedInput
    eventParticipations?: EventParticipationUpdateManyWithoutTrackNestedInput
  }

  export type TrackUncheckedUpdateWithoutBoostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    eventParticipations?: EventParticipationUncheckedUpdateManyWithoutTrackNestedInput
  }

  export type UserCreateWithoutTransactionsInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackCreateNestedManyWithoutUserInput
    studioItems?: UserStudioItemCreateNestedManyWithoutUserInput
    sentBoosts?: BoostCreateNestedManyWithoutSenderInput
    receivedBoosts?: BoostCreateNestedManyWithoutReceiverInput
    participations?: EventParticipationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: string
    soundcloudId: string
    username: string
    email: string
    infosargent?: number
    level?: number
    experience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutUserInput
    studioItems?: UserStudioItemUncheckedCreateNestedManyWithoutUserInput
    sentBoosts?: BoostUncheckedCreateNestedManyWithoutSenderInput
    receivedBoosts?: BoostUncheckedCreateNestedManyWithoutReceiverInput
    participations?: EventParticipationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUpdateManyWithoutUserNestedInput
    studioItems?: UserStudioItemUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUpdateManyWithoutSenderNestedInput
    receivedBoosts?: BoostUpdateManyWithoutReceiverNestedInput
    participations?: EventParticipationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    infosargent?: FloatFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutUserNestedInput
    studioItems?: UserStudioItemUncheckedUpdateManyWithoutUserNestedInput
    sentBoosts?: BoostUncheckedUpdateManyWithoutSenderNestedInput
    receivedBoosts?: BoostUncheckedUpdateManyWithoutReceiverNestedInput
    participations?: EventParticipationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TrackCreateManyUserInput = {
    id?: string
    soundcloudTrackId: string
    title: string
    artwork?: string | null
    genre?: TrackCreategenreInput | string[]
    mood?: TrackCreatemoodInput | string[]
    baseValue?: number
    currentValue?: number
    playCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStudioItemCreateManyUserInput = {
    id?: string
    purchasedAt?: Date | string
    studioItemId: string
  }

  export type BoostCreateManySenderInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    receiverId: string
    trackId: string
  }

  export type BoostCreateManyReceiverInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    senderId: string
    trackId: string
  }

  export type EventParticipationCreateManyUserInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    eventId: string
    trackId: string
  }

  export type TransactionCreateManyUserInput = {
    id?: string
    type: string
    amount: number
    description: string
    createdAt?: Date | string
  }

  export type TrackUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    boosts?: BoostUpdateManyWithoutTrackNestedInput
    eventParticipations?: EventParticipationUpdateManyWithoutTrackNestedInput
  }

  export type TrackUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    boosts?: BoostUncheckedUpdateManyWithoutTrackNestedInput
    eventParticipations?: EventParticipationUncheckedUpdateManyWithoutTrackNestedInput
  }

  export type TrackUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    soundcloudTrackId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artwork?: NullableStringFieldUpdateOperationsInput | string | null
    genre?: TrackUpdategenreInput | string[]
    mood?: TrackUpdatemoodInput | string[]
    baseValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    playCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStudioItemUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studioItem?: StudioItemUpdateOneRequiredWithoutUserItemsNestedInput
  }

  export type UserStudioItemUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studioItemId?: StringFieldUpdateOperationsInput | string
  }

  export type UserStudioItemUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studioItemId?: StringFieldUpdateOperationsInput | string
  }

  export type BoostUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneRequiredWithoutReceivedBoostsNestedInput
    track?: TrackUpdateOneRequiredWithoutBoostsNestedInput
  }

  export type BoostUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiverId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type BoostUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiverId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type BoostUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentBoostsNestedInput
    track?: TrackUpdateOneRequiredWithoutBoostsNestedInput
  }

  export type BoostUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type BoostUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type EventParticipationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    event?: GameEventUpdateOneRequiredWithoutParticipationsNestedInput
    track?: TrackUpdateOneRequiredWithoutEventParticipationsNestedInput
  }

  export type EventParticipationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type EventParticipationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoostCreateManyTrackInput = {
    id?: string
    amount: number
    duration: number
    startTime?: Date | string
    endTime: Date | string
    createdAt?: Date | string
    senderId: string
    receiverId: string
  }

  export type EventParticipationCreateManyTrackInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    userId: string
    eventId: string
  }

  export type BoostUpdateWithoutTrackInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentBoostsNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedBoostsNestedInput
  }

  export type BoostUncheckedUpdateWithoutTrackInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type BoostUncheckedUpdateManyWithoutTrackInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
  }

  export type EventParticipationUpdateWithoutTrackInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutParticipationsNestedInput
    event?: GameEventUpdateOneRequiredWithoutParticipationsNestedInput
  }

  export type EventParticipationUncheckedUpdateWithoutTrackInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type EventParticipationUncheckedUpdateManyWithoutTrackInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type UserStudioItemCreateManyStudioItemInput = {
    id?: string
    purchasedAt?: Date | string
    userId: string
  }

  export type UserStudioItemUpdateWithoutStudioItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudioItemsNestedInput
  }

  export type UserStudioItemUncheckedUpdateWithoutStudioItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserStudioItemUncheckedUpdateManyWithoutStudioItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type EventParticipationCreateManyEventInput = {
    id?: string
    joinedAt?: Date | string
    score?: number
    userId: string
    trackId: string
  }

  export type EventParticipationUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutParticipationsNestedInput
    track?: TrackUpdateOneRequiredWithoutEventParticipationsNestedInput
  }

  export type EventParticipationUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }

  export type EventParticipationUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    score?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrackCountOutputTypeDefaultArgs instead
     */
    export type TrackCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrackCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudioItemCountOutputTypeDefaultArgs instead
     */
    export type StudioItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudioItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameEventCountOutputTypeDefaultArgs instead
     */
    export type GameEventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameEventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrackDefaultArgs instead
     */
    export type TrackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudioItemDefaultArgs instead
     */
    export type StudioItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudioItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserStudioItemDefaultArgs instead
     */
    export type UserStudioItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserStudioItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameEventDefaultArgs instead
     */
    export type GameEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventParticipationDefaultArgs instead
     */
    export type EventParticipationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventParticipationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoostDefaultArgs instead
     */
    export type BoostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionDefaultArgs instead
     */
    export type TransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameCycleDefaultArgs instead
     */
    export type GameCycleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameCycleDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}